# CSV+ tests
## Distributed under both the W3C Test Suite License[1] and the W3C 3-
## clause BSD License[2]. To contribute to a W3C Test Suite, see the
## policies and contribution forms [3]
##
## 1. http://www.w3.org/Consortium/Legal/2008/04-testsuite-license
## 2. http://www.w3.org/Consortium/Legal/2008/03-bsd-license
## 3. http://www.w3.org/2004/10/27-testcases
##
## Test types (for now)
## * CsvToJsonTest  - tests CSV evaluation to JSON
## * CsvToRdfTest   - tests CSV evaluation to RDF using graph isomorphism
## * CsvSparqlTest - tests CSV evaulation to RDF using SPARQL ASK query

@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf:   <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix csvt: <http://w3c.github.io/csvw/tests/vocab#> .

<>  a mf:Manifest ;
    mf:name "CSV+ tests" ;
    mf:entries (
      # Right now, just syntax tests; later, replicate for different transformations
      <test001j>
      <test001r>
      <test002j>
      <test002r>
      <test003j>
      <test003r>
      <test005j>
      <test005r>
      <test006j>
      <test006r>
      <test007j>
      <test007r>
      <test008j>
      <test008r>
      <test009j>
      <test009r>
      <test010j>
      <test010r>
      <test011j>
      <test011r>
      <test012j>
      <test012r>
      <test012mj>
      <test012mr>
      <test013j>
      <test013r>
    ) .

<test001j> a csvt:CsvToJsonTest;
  mf:name       "Simple table (json)";
  rdfs:comment  "The simplest possible table without metadata";
  csvt:approval csvt:Proposed;
  mf:action     <test001.csv>;
  mf:result     <test001.json>;
  .

<test001r> a csvt:CsvToRdfTest;
  mf:name       "Simple table (rdf)";
  rdfs:comment  "The simplest possible table without metadata";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  mf:action     <test001.csv>;
  mf:result     <test001.ttl>;
  .

<test002j> a csvt:CsvToJsonTest;
  mf:name       "Table with quoted field (json)";
  rdfs:comment  "Table with one field being quoted without metadata";
  csvt:approval csvt:Proposed;
  mf:action     <test002.csv>;
  mf:result     <test002.json>;
  .

<test002r> a csvt:CsvToRdfTest;
  mf:name       "Table with quoted field (rdf)";
  rdfs:comment  "Table with one field being quoted without metadata";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  mf:action     <test002.csv>;
  mf:result     <test002.ttl>;
  .

<test003j> a csvt:CsvToJsonTest;
  mf:name       "Simple table with surrounding spaces (json)";
  rdfs:comment  "Table with whitespace before and after every field without metadata";
  csvt:approval csvt:Proposed;
  mf:action     <test003.csv>;
  mf:result     <test003.json>;
  .

<test003r> a csvt:CsvToRdfTest;
  mf:name       "Simple table with surrounding spaces (rdf)";
  rdfs:comment  "Table with whitespace before and after every field without metadata";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  mf:action     <test003.csv>;
  mf:result     <test003.ttl>;
  .

<test005j> a csvt:CsvToJsonTest;
  mf:name       "Table with identifiers references (json)";
  rdfs:comment  "A table with entity identifiers and references to other entities without metadata";
  csvt:approval csvt:Proposed;
  mf:action     <test005.csv>;
  mf:result     <test005.json>;
  .

<test005r> a csvt:CsvToRdfTest;
  mf:name       "Table with identifiers references (rdf)";
  rdfs:comment  "A table with entity identifiers and references to other entities without metadata";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  mf:action     <test005.csv>;
  mf:result     <test005.ttl>;
  .

<test006j> a csvt:CsvToJsonTest;
  mf:name       "Simple join table without identifiers (json)";
  rdfs:comment  "Records contain two entities with relationships which are duplicated without metadata";
  csvt:approval csvt:Proposed;
  mf:action     <test006.csv>;
  mf:result     <test006.json>;
  .

<test006r> a csvt:CsvToRdfTest;
  mf:name       "Simple join table without identifiers (rdf)";
  rdfs:comment  "Records contain two entities with relationships which are duplicated without metadata";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  mf:action     <test006.csv>;
  mf:result     <test006.ttl>;
  .

<test007j> a csvt:CsvToJsonTest;
  mf:name       "Join table with unique identifiers (json)";
  rdfs:comment  "Joined data with identified records without metadata";
  csvt:approval csvt:Proposed;
  mf:action     <test007.csv>;
  mf:result     <test007.json>;
  .

<test007r> a csvt:CsvToRdfTest;
  mf:name       "Join table with unique identifiers (rdf)";
  rdfs:comment  "Joined data with identified records without metadata";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  mf:action     <test007.csv>;
  mf:result     <test007.ttl>;
  .

<test008j> a csvt:CsvToJsonTest;
  mf:name       "Microsyntax - internal field separator (json)";
  rdfs:comment  "One field has comma-separated values without metadata";
  csvt:approval csvt:Proposed;
  mf:action     <test008.csv>;
  mf:result     <test008.json>;
  .

<test008r> a csvt:CsvToRdfTest;
  mf:name       "Microsyntax - internal field separator (rdf)";
  rdfs:comment  "One field has comma-separated values without metadata";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  mf:action     <test008.csv>;
  mf:result     <test008.ttl>;
  .

<test009j> a csvt:CsvToJsonTest;
  mf:name       "Microsyntax - formatted time (json)";
  rdfs:comment  "Field with parseable human formatted time without metadata";
  csvt:approval csvt:Proposed;
  mf:action     <test009.csv>;
  mf:result     <test009.json>;
  .

<test009r> a csvt:CsvToRdfTest;
  mf:name       "Microsyntax - formatted time (rdf)";
  rdfs:comment  "Field with parseable human formatted time without metadata";
  csvt:approval csvt:Proposed;
  mf:action     <test009.csv>;
  csvt:option   [csvt:noProv true];
  mf:result     <test009.ttl>;
  .

<test010j> a csvt:CsvToJsonTest;
  mf:name       "country-codes-and-names example (json)";
  rdfs:comment  "Country Codes and Names example";
  csvt:approval csvt:Proposed;
  mf:action     <test010.csv>;
  mf:result     <test010.json>;
  .

<test010r> a csvt:CsvToRdfTest;
  mf:name       "country-codes-and-names example (rdf)";
  rdfs:comment  "Country Codes and Names example";
  csvt:approval csvt:Proposed;
  mf:action     <test010.csv>;
  csvt:option   [csvt:noProv true];
  mf:result     <test010.ttl>;
  .

<test011j> a csvt:CsvToJsonTest;
  mf:name       "tree-ops example with metadata (json)";
  rdfs:comment  "tree-ops example with metadata. Processors should load metadata based on action URL.";
  csvt:approval csvt:Proposed;
  mf:action     <test011.csv>;
  csvt:implicit <test011.csv-metadata.json>;
  mf:result     <test011.json>;
  .

<test011r> a csvt:CsvToRdfTest;
  mf:name       "tree-ops example with metadata (rdf)";
  rdfs:comment  "tree-ops example with metadata. Processors should load metadata based on action URL.";
  csvt:approval csvt:Proposed;
  mf:action     <test011.csv>;
  csvt:implicit <test011.csv-metadata.json>;
  csvt:option   [csvt:noProv true];
  mf:result     <test011.ttl>;
  .

<test012j> a csvt:CsvToJsonTest;
  mf:name       "tree-ops example with directory metadata (json)";
  rdfs:comment  "tree-ops example with directory metadata. Processors should find directory-based metadata.";
  csvt:approval csvt:Proposed;
  mf:action     <test012/test012.csv>;
  csvt:implicit <test012/metadata.json>;
  mf:result     <test012/test012.json>;
  .

<test012r> a csvt:CsvToRdfTest;
  mf:name       "tree-ops example with directory metadata (rdf)";
  rdfs:comment  "tree-ops example with directory metadata. Processors should find directory-based metadata.";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  mf:action     <test012/test012.csv>;
  csvt:implicit <test012/metadata.json>;
  mf:result     <test012/test012.ttl>;
  .

<test012mj> a csvt:MetadataToJsonTest;
  mf:name       "tree-ops example from metadata (json)";
  rdfs:comment  "tree-ops example from metadata. Processors should find CSV from metadata action file.";
  csvt:approval csvt:Proposed;
  mf:action     <test012/metadata.json>;
  csvt:implicit <test012/test012.csv>;
  mf:result     <test012/test012.json>;
  .

<test012mr> a csvt:MetadataToRdfTest;
  mf:name       "tree-ops example from metadata (rdf)";
  rdfs:comment  "tree-ops example from metadata. Processors should find CSV from metadata action file.";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  mf:action     <test012/metadata.json>;
  csvt:implicit <test012/test012.csv>;
  mf:result     <test012/test012.ttl>;
  .

<test013j> a csvt:CsvToJsonTest;
  mf:name       "tree-ops example with user-specified metadata (json)";
  rdfs:comment  "tree-ops example with user-specified metadata. Processors load user-specified metadata before CSV.";
  csvt:approval csvt:Proposed;
  csvt:option   [
    csvt:metadata <test013-user-metadata.json>;
  ];
  mf:action     <test013.csv>;
  csvt:implicit <test013-user-metadata.json>;
  mf:result     <test013.json>;
  .

<test013r> a csvt:CsvToRdfTest;
  mf:name       "tree-ops example with user-specified metadata (rdf)";
  rdfs:comment  "tree-ops example with user-specified metadata. Processors load user-specified metadata before CSV.";
  csvt:approval csvt:Proposed;
  csvt:option   [
    csvt:noProv true;
    csvt:metadata <test013-user-metadata.json>;
  ];
  mf:action     <test013.csv>;
  csvt:implicit <test013-user-metadata.json>;
  mf:result     <test013.ttl>;
  .

<test014j> a csvt:CsvToJsonTest;
  mf:name       "tree-ops example with linked metadata (json)";
  rdfs:comment  "tree-ops example with linked metadata. Processors load metadata from link header.";
  csvt:approval csvt:Proposed;
  csvt:httpLink "<test014-linked-metadata.json>; rel=\"describedby\"";
  mf:action     <test014.csv>;
  csvt:implicit <test014-linked-metadata.json>;
  mf:result     <test014.json>;
  .

<test014r> a csvt:CsvToRdfTest;
  mf:name       "tree-ops example with linked metadata (rdf)";
  rdfs:comment  "tree-ops example with linked metadata. Processors load metadata from link header.";
  csvt:approval csvt:Proposed;
  csvt:option   [csvt:noProv true];
  csvt:httpLink "<test014-linked-metadata.json>; rel=\"describedby\"";
  mf:action     <test014.csv>;
  csvt:implicit <test014-linked-metadata.json>;
  mf:result     <test014.ttl>;
  .
