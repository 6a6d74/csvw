## CSV+ tests
## Distributed under both the W3C Test Suite License[1] and the W3C 3-
## clause BSD License[2]. To contribute to a W3C Test Suite, see the
## policies and contribution forms [3]
##
## 1. http://www.w3.org/Consortium/Legal/2008/04-testsuite-license
## 2. http://www.w3.org/Consortium/Legal/2008/03-bsd-license
## 3. http://www.w3.org/2004/10/27-testcases
##
## Test types (for now)
## * CsvToJsonTest  - tests CSV evaluation to JSON
## * CsvToRdfTest   - tests CSV evaluation to RDF using graph isomorphism
## * CsvSparqlTest - tests CSV evaulation to RDF using SPARQL ASK query

@prefix : <manifest-validation#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf:   <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix csvt: <http://w3c.github.io/csvw/tests/vocab#> .

<manifest-validation>  a mf:Manifest ;

  rdfs:label "CSVW Validation Tests";
  rdfs:comment "Tests CSV validation using metadata.";
  mf:entries (
    :test001 :test002 :test003 :test005 :test006 :test007 :test008 :test009 :test010 :test011
    :test012 :test013 :test014 :test015 :test016 :test017 :test018 :test019 :test020 :test021
    :test022 :test023 :test024 :test025 :test026 :test027 :test028 :test029 :test030 :test031
    :test032 :test033 :test034 :test035 :test036 :test037 :test038 :test039 :test040 :test041
    :test042 :test043 :test044 :test045 :test046 :test047 :test048 :test049 :test050 :test051
    :test052 :test054 :test055 :test056 :test057 :test058 :test059 :test060 :test061 :test062
    :test063 :test065 :test066 :test067 :test068 :test069 :test070 :test071 :test072 :test073
    :test074 :test075 :test076 :test077 :test078 :test079 :test080 :test081 :test082 :test083
    :test084 :test085 :test086 :test087 :test088 :test089 :test090 :test091 :test092 :test093
    :test094 :test095 :test096 :test097 :test098 :test099 :test100 :test101 :test102 :test103
    :test104 :test105 :test106 :test107 :test108 :test109 :test110 :test111 :test112 :test113
    :test114 :test115 :test116 :test117 :test118 :test119 :test120 :test121 :test122 :test123
    :test124 :test125 :test126 :test127 :test128 :test129 :test130 :test131 :test132 :test133
    :test134 :test135 :test136 :test137 :test138 :test139 :test140 :test141 :test142 :test143
    :test144 :test145 :test146 :test147 :test148 :test149 :test150 :test151 :test152 :test153
    :test154 :test155 :test156 :test157 :test158 :test159 :test160 :test161 :test162 :test163
    :test164 :test165 :test166 :test167 :test168 :test169 :test170 :test171 :test172 :test173
    :test174 :test175 :test176 :test177 :test178 :test179 :test180 :test181 :test182 :test183
    :test184 :test185 :test186
  ) .

:test001 a csvt:PositiveValidationTest;
  mf:name "Simple table";
  rdfs:comment "The simplest possible table without metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test001.csv>;
  .

:test002 a csvt:PositiveValidationTest;
  mf:name "Quoted field";
  rdfs:comment "Table with one quoted field without metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test002.csv>;
  .

:test003 a csvt:PositiveValidationTest;
  mf:name "Surrounding spaces";
  rdfs:comment "Table with whitespace before and after every field without metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test003.csv>;
  .

:test005 a csvt:PositiveValidationTest;
  mf:name "Identifier references";
  rdfs:comment "A table with entity identifiers and references to other entities without metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test005.csv>;
  .

:test006 a csvt:PositiveValidationTest;
  mf:name "No identifiers";
  rdfs:comment "Records contain two entities with relationships which are duplicated without metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test006.csv>;
  .

:test007 a csvt:PositiveValidationTest;
  mf:name "Joined table with unique identifiers";
  rdfs:comment "Joined data with identified records without metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test007.csv>;
  .

:test008 a csvt:PositiveValidationTest;
  mf:name "Microsyntax - internal field separator";
  rdfs:comment "One field has comma-separated values without metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test008.csv>;
  .

:test009 a csvt:PositiveValidationTest;
  mf:name "Microsyntax - formatted time";
  rdfs:comment "Field with parseable human formatted time without metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test009.csv>;
  .

:test010 a csvt:PositiveValidationTest;
  mf:name "Country-codes-and-names example";
  rdfs:comment "Country-codes-and-names example";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test010.csv>;
  .

:test011 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with metadata";
  rdfs:comment "tree-ops example with metadata. Processors should load metadata based on action URL.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test011/tree-ops.csv>;
  csvt:implicit <test011/tree-ops.csv-metadata.json>;
  .

:test012 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with directory metadata";
  rdfs:comment "tree-ops example with directory metadata. Processors should find directory-based metadata.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test012/tree-ops.csv>;
  csvt:implicit <test012/metadata.json>;
  .

:test013 a csvt:PositiveValidationTest;
  mf:name "tree-ops example from user metadata";
  rdfs:comment "tree-ops example from user metadata.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test013-user-metadata.json>;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test013-user-metadata.json>;
  .

:test014 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with linked metadata";
  rdfs:comment "tree-ops example with linked metadata. Processors load metadata from link header.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  csvt:httpLink "<linked-metadata.json>; rel=\"describedby\"";
  mf:action <test014/tree-ops.csv>;
  csvt:implicit <test014/linked-metadata.json>;
  .

:test015 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with user and directory metadata";
  rdfs:comment "tree-ops example with user and directory metadata. Processors should find directory-based metadata.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test015/user-metadata.json>;
  ];
  mf:action <test015/tree-ops.csv>;
  csvt:implicit <test015/user-metadata.json>,
    <test015/metadata.json>;
  .

:test016 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with linked and directory metadata";
  rdfs:comment "tree-ops example with linked and directory metadata. Processors should find link- and directory-based metadata.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  csvt:httpLink "<linked-metadata.json>; rel=\"describedby\"";
  mf:action <test016/tree-ops.csv>;
  csvt:implicit <test016/linked-metadata.json>,
    <test016/metadata.json>;
  .

:test017 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with file and directory metadata";
  rdfs:comment "tree-ops example with file and directory metadata. Processors should find file- and directory-based metadata.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test017/tree-ops.csv>;
  csvt:implicit <test017/tree-ops.csv-metadata.json>,
    <test017/metadata.json>;
  .

:test018 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with user, file and directory metadata";
  rdfs:comment "tree-ops example with user, file and directory metadata. Processors should find user-, file- and directory-based metadata.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test018/user-metadata.json>;
  ];
  mf:action <test018/tree-ops.csv>;
  csvt:implicit <test018/user-metadata.json>,
    <test018/tree-ops.csv-metadata.json>,
    <test018/metadata.json>;
  .

:test019 a csvt:PositiveValidationTest;
  mf:name "no header";
  rdfs:comment "If a CSV+ file does not include a header line, this MUST be specified using the `header` parameter.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <tree-ops.csv>;
  csvt:contentType "text/csv;header=absent";
  .

:test020 a csvt:PositiveValidationTest;
  mf:name "dialect: trim=start";
  rdfs:comment "If `trim` is `true` or "start" then whitespace from the start of values that are not enclosed MUST be removed from the value.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test020-metadata.json>;
  csvt:implicit <test020.csv>;
  .

:test021 a csvt:PositiveValidationTest;
  mf:name "dialect: trim=end";
  rdfs:comment "If `trim` is `true` or "end" then whitespace from the end of values that are not enclosed MUST be removed from the value.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test021-metadata.json>;
  csvt:implicit <test021.csv>;
  .

:test022 a csvt:PositiveValidationTest;
  mf:name "dialect: trim=true";
  rdfs:comment "If `trim` is `true` or "start" then whitespace from the start of values that are not enclosed MUST be removed from the value. If `trim` is `true` or "end" then whitespace from the end of values that are not enclosed MUST be removed from the value.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test022-metadata.json>;
  csvt:implicit <test022.csv>;
  .

:test023 a csvt:PositiveValidationTest;
  mf:name "dialect: header=false";
  rdfs:comment "If `true`, sets the `header row count` flag to 1, and if `false` to 0, unless `headerRowCount` is provided, in which case the value provided for the `header` property is ignored.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test023-user-metadata.json>;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test023-user-metadata.json>;
  .

:test024 a csvt:PositiveValidationTest;
  mf:name "dialect: header=false and headerRowCount=1";
  rdfs:comment "If `true`, sets the `header row count` flag to 1, and if `false` to 0, unless `headerRowCount` is provided, in which case the value provided for the `header` property is ignored.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test024-user-metadata.json>;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test024-user-metadata.json>;
  .

:test025 a csvt:PositiveValidationTest;
  mf:name "dialect: header=false and skipRows=1";
  rdfs:comment "Ignore header uses column definitions from metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test025-user-metadata.json>;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test025-user-metadata.json>;
  .

:test026 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with directory metadata";
  rdfs:comment "tree-ops example with directory metadata. Processors should find directory-based metadata.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test026/metadata.json>;
  csvt:implicit <test026/tree-ops.csv>,
    <test026/metadata.json>;
  .

:test027 a csvt:PositiveValidationTest;
  mf:name "tree-ops minimal output";
  rdfs:comment "tree-ops example with metadata. Minimal output mode";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test027-user-metadata.json>;
    csvt:minimal true;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test027-user-metadata.json>;
  .

:test028 a csvt:PositiveValidationTest;
  mf:name "countries.csv example";
  rdfs:comment "countries.csv example with no metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <countries.csv>;
  .

:test029 a csvt:PositiveValidationTest;
  mf:name "countries.csv minimal";
  rdfs:comment "countries.csv example with no metadata and minimal output";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <countries.csv>;
  .

:test030 a csvt:PositiveValidationTest;
  mf:name "countries.json example";
  rdfs:comment "countries.json from metadata";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <countries.json>;
  csvt:implicit <countries.csv>,
    <country_slice.csv>;
  .

:test031 a csvt:PositiveValidationTest;
  mf:name "countries.json example minimal output";
  rdfs:comment "countries.json from metadata minimal output";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <countries.json>;
  csvt:implicit <countries.csv>,
    <country_slice.csv>;
  .

:test032 a csvt:PositiveValidationTest;
  mf:name "events-listing.csv example";
  rdfs:comment "events-listing example with file metadata, virtual columns and multiple subjects per row";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test032/metadata.json>;
  csvt:implicit <test032/events-listing.csv>,
    <test032/metadata.json-metadata.json>;
  .

:test033 a csvt:PositiveValidationTest;
  mf:name "events-listing.csv minimal output";
  rdfs:comment "events-listing example with file metadata, virtual columns and multiple subjects per row; minimal output";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <test033/metadata.json>;
  csvt:implicit <test033/events-listing.csv>,
    <test033/metadata.json-metadata.json>;
  .

:test034 a csvt:PositiveValidationTest;
  mf:name "roles example";
  rdfs:comment "Public Sector Roles example with referenced schemas";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test034/metadata.json>;
  csvt:implicit <test034/senior-roles.csv>,
    <test034/junior-roles.csv>,
    <test034/gov.uk/data/organizations.csv>,
    <test034/gov.uk/data/professions.csv>,
    <test034/gov.uk/schema/junior-roles.json>,
    <test034/gov.uk/schema/senior-roles.json>,
    <test034/gov.uk/schema/organizations.json>,
    <test034/gov.uk/schema/professions.json>;
  .

:test035 a csvt:PositiveValidationTest;
  mf:name "roles minimal";
  rdfs:comment "Public Sector Roles example with referenced schemas; minimal output";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <test035/metadata.json>;
  csvt:implicit <test035/senior-roles.csv>,
    <test035/junior-roles.csv>,
    <test035/gov.uk/data/organizations.csv>,
    <test035/gov.uk/data/professions.csv>,
    <test035/gov.uk/schema/junior-roles.json>,
    <test035/gov.uk/schema/senior-roles.json>,
    <test035/gov.uk/schema/organizations.json>,
    <test035/gov.uk/schema/professions.json>;
  .

:test036 a csvt:PositiveValidationTest;
  mf:name "tree-ops-ext example";
  rdfs:comment "tree-ops extended example";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test036/tree-ops-ext.csv>;
  csvt:implicit <test036/tree-ops-ext.csv-metadata.json>;
  .

:test037 a csvt:PositiveValidationTest;
  mf:name "tree-ops-ext minimal";
  rdfs:comment "tree-ops extended example; minimal output";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <test037/tree-ops-ext.csv>;
  csvt:implicit <test037/tree-ops-ext.csv-metadata.json>;
  .

:test038 a csvt:PositiveValidationTest;
  mf:name "inherited properties propagation";
  rdfs:comment "Setting inherited properties at different levels inherit to cell";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test038-metadata.json>;
  csvt:implicit <test038.csv>;
  .

:test039 a csvt:PositiveValidationTest;
  mf:name "valid inherited properties";
  rdfs:comment "Different combinations of valid inherited properties";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test039-metadata.json>;
  csvt:implicit <test039.csv>;
  .

:test040 a csvt:WarningValidationTest;
  mf:name "invalid null";
  rdfs:comment "Metadata generates warning and uses default with invalid `null` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test040-metadata.json>;
  csvt:implicit <test040.csv>;
  .

:test041 a csvt:WarningValidationTest;
  mf:name "invalid lang";
  rdfs:comment "Metadata generates warning and uses default with invalid `lang` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test041-metadata.json>;
  csvt:implicit <test041.csv>;
  .

:test042 a csvt:WarningValidationTest;
  mf:name "invalid textDirection";
  rdfs:comment "Metadata generates warning and uses default with invalid `textDirection`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test042-metadata.json>;
  csvt:implicit <test042.csv>;
  .

:test043 a csvt:WarningValidationTest;
  mf:name "invalid separator";
  rdfs:comment "Metadata generates warning and uses default with invalid `separator`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test043-metadata.json>;
  csvt:implicit <test043.csv>;
  .

:test044 a csvt:WarningValidationTest;
  mf:name "invalid ordered";
  rdfs:comment "Metadata generates warning and uses default with invalid `ordered`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test044-metadata.json>;
  csvt:implicit <test044.csv>;
  .

:test045 a csvt:WarningValidationTest;
  mf:name "invalid default";
  rdfs:comment "Metadata generates warning and uses default with invalid `default`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test045-metadata.json>;
  csvt:implicit <test045.csv>;
  .

:test046 a csvt:NegativeValidationTest;
  mf:name "invalid dataype";
  rdfs:comment "If the value of this property is a string, it must be one of the built-in datatypes defined in section 5.11.1 Built-in Datatypes or an absolute URL";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test046-metadata.json>;
  csvt:implicit <test046.csv>;
  .

:test047 a csvt:WarningValidationTest;
  mf:name "invalid aboutUrl";
  rdfs:comment "If the supplied value of a URI template property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test047-metadata.json>;
  csvt:implicit <test047.csv>;
  .

:test048 a csvt:WarningValidationTest;
  mf:name "invalid propertyUrl";
  rdfs:comment "If the supplied value of a URI template property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test048-metadata.json>;
  csvt:implicit <test048.csv>;
  .

:test049 a csvt:WarningValidationTest;
  mf:name "invalid valueUrl";
  rdfs:comment "If the supplied value of a URI template property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test049-metadata.json>;
  csvt:implicit <test049.csv>;
  .

:test050 a csvt:PositiveValidationTest;
  mf:name "dialect: delimiter";
  rdfs:comment "Recognizes tab-separated-values with appropriate `delimiter`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test050-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test051 a csvt:PositiveValidationTest;
  mf:name "dialect: commentPrefix in header";
  rdfs:comment "Adds comments when found in `skipRows`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test051-metadata.json>;
  csvt:implicit <test051.csv>;
  .

:test052 a csvt:PositiveValidationTest;
  mf:name "dialect: commentPrefix in rows";
  rdfs:comment "Adds comments when found in `content`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test052-metadata.json>;
  csvt:implicit <test052.csv>;
  .

:test054 a csvt:PositiveValidationTest;
  mf:name "dialect: skipColumns";
  rdfs:comment "Ignores skipped columns";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test054-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test055 a csvt:PositiveValidationTest;
  mf:name "dialect: skipBlankRows";
  rdfs:comment "Ignores rows in which all columns are empty";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test055-metadata.json>;
  csvt:implicit <test055.csv>;
  .

:test056 a csvt:PositiveValidationTest;
  mf:name "dialect: skipInitialSpace";
  rdfs:comment "Equivalent to` trim="start"`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test056-metadata.json>;
  csvt:implicit <test056.csv>;
  .

:test057 a csvt:PositiveValidationTest;
  mf:name "dialect as URL reference";
  rdfs:comment "Loads a `dialect description` if referenced using a URL";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test057-metadata.json>;
  csvt:implicit <test057.csv>,
    <test057-dialect.json>;
  .

:test058 a csvt:PositiveValidationTest;
  mf:name "table dialect vs tablegroup dialect";
  rdfs:comment "A dialect defined in a Table completely overrides that defined in a TableGroup";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test058-metadata.json>;
  csvt:implicit <test058.csv>;
  .

:test059 a csvt:WarningValidationTest;
  mf:name "dialect: invalid commentPrefix";
  rdfs:comment "Metadata generates warning and uses default with invalid `commentPrefix` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test059-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test060 a csvt:WarningValidationTest;
  mf:name "dialect: invalid delimiter";
  rdfs:comment "Metadata generates warning and uses default with invalid `delimiter` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test060-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test061 a csvt:WarningValidationTest;
  mf:name "dialect: invalid doubleQuote";
  rdfs:comment "Metadata generates warning and uses default with invalid `doubleQuote` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test061-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test062 a csvt:WarningValidationTest;
  mf:name "dialect: invalid encoding";
  rdfs:comment "Metadata generates warning and uses default with invalid `encoding` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test062-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test063 a csvt:WarningValidationTest;
  mf:name "dialect: invalid header";
  rdfs:comment "Metadata generates warning and uses default with invalid `header` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test063-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test065 a csvt:WarningValidationTest;
  mf:name "dialect: invalid headerRowCount";
  rdfs:comment "Metadata generates warning and uses default with invalid `headerRowCount` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test065-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test066 a csvt:WarningValidationTest;
  mf:name "dialect: invalid lineTerminators";
  rdfs:comment "Metadata generates warning and uses default with invalid `lineTerminators` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test066-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test067 a csvt:WarningValidationTest;
  mf:name "dialect: invalid quoteChar";
  rdfs:comment "Metadata generates warning and uses default with invalid `quoteChar` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test067-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test068 a csvt:WarningValidationTest;
  mf:name "dialect: invalid skipBlankRows";
  rdfs:comment "Metadata generates warning and uses default with invalid `skipBlankRows` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test068-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test069 a csvt:WarningValidationTest;
  mf:name "dialect: invalid skipColumns";
  rdfs:comment "Metadata generates warning and uses default with invalid `skipColumns` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test069-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test070 a csvt:WarningValidationTest;
  mf:name "dialect: invalid skipInitialSpace";
  rdfs:comment "Metadata generates warning and uses default with invalid `skipInitialSpace` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test070-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test071 a csvt:WarningValidationTest;
  mf:name "dialect: invalid skipRows";
  rdfs:comment "Metadata generates warning and uses default with invalid `skipRows` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test071-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test072 a csvt:WarningValidationTest;
  mf:name "dialect: invalid trim";
  rdfs:comment "Metadata generates warning and uses default with invalid `trim` value";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test072-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test073 a csvt:WarningValidationTest;
  mf:name "invalid @language";
  rdfs:comment "The value of `@language` MUST be a valid `BCP47` language code";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test073-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test074 a csvt:NegativeValidationTest;
  mf:name "empty tables";
  rdfs:comment "Compliant application must raise an error if this array does not contain one or more `table descriptions`.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test074-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test075 a csvt:WarningValidationTest;
  mf:name "invalid tableGroup tableDirection";
  rdfs:comment "An atomic property that must have a single string value that is one of "rtl", "ltr" or "default".";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test075-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test076 a csvt:WarningValidationTest;
  mf:name "invalid table tableDirection";
  rdfs:comment "An atomic property that must have a single string value that is one of "rtl", "ltr" or "default".";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test076-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test077 a csvt:NegativeValidationTest;
  mf:name "invalid tableGroup @id";
  rdfs:comment "It must not start with `_:.`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test077-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test078 a csvt:NegativeValidationTest;
  mf:name "invalid table @id";
  rdfs:comment "It must not start with `_:.`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test078-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test079 a csvt:NegativeValidationTest;
  mf:name "invalid schema @id";
  rdfs:comment "It must not start with `_:.`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test079-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test080 a csvt:NegativeValidationTest;
  mf:name "invalid column @id";
  rdfs:comment "It must not start with `_:.`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test080-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test081 a csvt:NegativeValidationTest;
  mf:name "invalid dialect @id";
  rdfs:comment "It must not start with `_:.`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test081-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test082 a csvt:NegativeValidationTest;
  mf:name "invalid template @id";
  rdfs:comment "It must not start with `_:.`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test082-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test083 a csvt:NegativeValidationTest;
  mf:name "invalid tableGroup @type";
  rdfs:comment "If included `@type` must be `TableGroup`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test083-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test084 a csvt:NegativeValidationTest;
  mf:name "invalid table @type";
  rdfs:comment "If included `@type` must be `Table`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test084-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test085 a csvt:NegativeValidationTest;
  mf:name "invalid schema @type";
  rdfs:comment "If included `@type` must be `Schema`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test085-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test086 a csvt:NegativeValidationTest;
  mf:name "invalid column @type";
  rdfs:comment "If included `@type` must be `Column`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test086-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test087 a csvt:NegativeValidationTest;
  mf:name "invalid dialect @type";
  rdfs:comment "If included `@type` must be `Dialect`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test087-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test088 a csvt:NegativeValidationTest;
  mf:name "invalid template @type";
  rdfs:comment "If included `@type` must be `Template`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test088-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test089 a csvt:NegativeValidationTest;
  mf:name "missing tables in TableGroup";
  rdfs:comment "The `tables` property is required in a `TableGroup`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test089-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test090 a csvt:NegativeValidationTest;
  mf:name "missing url in Table";
  rdfs:comment "The `url` property is required in a `Table`";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test090-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test091 a csvt:NegativeValidationTest;
  mf:name "same number of columns in each row";
  rdfs:comment "each `row` MUST contain the same number of cells (although some of these cells may be empty)";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test091.csv>;
  csvt:implicit <tree-ops.csv>;
  .

:test092 a csvt:NegativeValidationTest;
  mf:name "invalid JSON";
  rdfs:comment "All compliant applications MUST generate errors and stop processing if a metadata document does not use valid JSON syntax";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test092-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test093 a csvt:WarningValidationTest;
  mf:name "undefined properties";
  rdfs:comment "Compliant applications MUST ignore properties (aside from _common properties_) which are not defined in this specification and MUST generate a warning when they are encoutered";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test093-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test094 a csvt:NegativeValidationTest;
  mf:name "inconsistent array values: tables";
  rdfs:comment "Any items within an array that are not valid objects of the type expected are ignored";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test094-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test095 a csvt:WarningValidationTest;
  mf:name "inconsistent array values: transformations";
  rdfs:comment "Any items within an array that are not valid objects of the type expected are ignored";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test095-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test096 a csvt:NegativeValidationTest;
  mf:name "inconsistent array values: columns";
  rdfs:comment "Any items within an array that are not valid objects of the type expected are ignored";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test096-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test097 a csvt:WarningValidationTest;
  mf:name "inconsistent array values: foreignKeys";
  rdfs:comment "Any items within an array that are not valid objects of the type expected are ignored";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test097-metadata.json>;
  csvt:implicit <countries.csv>,
    <country_slice.csv>;
  .

:test098 a csvt:WarningValidationTest;
  mf:name "inconsistent array values: tables";
  rdfs:comment "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test098-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test099 a csvt:WarningValidationTest;
  mf:name "inconsistent array values: transformations";
  rdfs:comment "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test099-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test100 a csvt:NegativeValidationTest;
  mf:name "inconsistent array values: columns";
  rdfs:comment "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test100-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test101 a csvt:WarningValidationTest;
  mf:name "inconsistent array values: foreignKeys";
  rdfs:comment "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test101-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test102 a csvt:WarningValidationTest;
  mf:name "inconsistent link values: @id";
  rdfs:comment "If the supplied value of a link property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test102-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test103 a csvt:NegativeValidationTest;
  mf:name "inconsistent link values: url";
  rdfs:comment "If the supplied value of a link property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test103-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test104 a csvt:NegativeValidationTest;
  mf:name "invalid columnReference";
  rdfs:comment "The referenced description object must have a name property";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test104-metadata.json>;
  csvt:implicit <countries.csv>,
    <country_slice.csv>;
  .

:test105 a csvt:NegativeValidationTest;
  mf:name "invalid primaryKey";
  rdfs:comment "The referenced description object must have a name property";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test105-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test106 a csvt:WarningValidationTest;
  mf:name "invalid dialect";
  rdfs:comment "If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test106-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test107 a csvt:NegativeValidationTest;
  mf:name "invalid tableSchema";
  rdfs:comment "If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test107-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test108 a csvt:NegativeValidationTest;
  mf:name "invalid reference";
  rdfs:comment "If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test108-metadata.json>;
  csvt:implicit <countries.csv>,
    <country_slice.csv>;
  .

:test109 a csvt:NegativeValidationTest;
  mf:name "titles with invalid language";
  rdfs:comment "Natural Language properties may be objects whose properties MUST be language codes as defined by [BCP47] and whose values are either strings or arrays, providing natural language strings in that language";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test109-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test110 a csvt:NegativeValidationTest;
  mf:name "titles with non-string values";
  rdfs:comment "Natural Language properties may be objects whose properties MUST be language codes as defined by [BCP47] and whose values are either strings or arrays, providing natural language strings in that language";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test110-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test111 a csvt:NegativeValidationTest;
  mf:name "titles with invalid value";
  rdfs:comment "If the supplied value of a natural language property is not a string, array or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an empty array";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test111-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test112 a csvt:NegativeValidationTest;
  mf:name "titles with non-string array values";
  rdfs:comment "If the supplied value is an array, any items in that array that are not strings MUST be ignored";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test112-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test113 a csvt:WarningValidationTest;
  mf:name "invalid suppressOutput";
  rdfs:comment "Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test113-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test114 a csvt:WarningValidationTest;
  mf:name "invalid name";
  rdfs:comment "Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test114-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test115 a csvt:WarningValidationTest;
  mf:name "invalid virtual";
  rdfs:comment "Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test115-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test116 a csvt:PositiveValidationTest;
  mf:name "file-metadata with query component";
  rdfs:comment "processors MUST attempt to locate a file-specific metadata document. This method MUST NOT be used if the URL of the tabular data file contains a query component.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test116.csv?query>;
  csvt:implicit <test116.csv-metadata.json>;
  .

:test117 a csvt:WarningValidationTest;
  mf:name "file-metadata not referencing file";
  rdfs:comment "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it must be ignored.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test117.csv>;
  csvt:implicit <test117.csv-metadata.json>;
  .

:test118 a csvt:PositiveValidationTest;
  mf:name "directory-metadata with query component";
  rdfs:comment "processors MUST attempt to locate a directory-level metadata document. This method MUST NOT be used if the URL of the tabular data file contains a query component.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test118/action.csv?query>;
  csvt:implicit <test118/metadata.json>;
  .

:test119 a csvt:WarningValidationTest;
  mf:name "directory-metadata not referencing file";
  rdfs:comment "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it must be ignored.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test119/action.csv>;
  csvt:implicit <test119/metadata.json>;
  .

:test120 a csvt:WarningValidationTest;
  mf:name "link-metadata not referencing file";
  rdfs:comment "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  csvt:httpLink "<test120-linked-metadata.json>; rel=\"describedby\"";
  mf:action <test120.csv>;
  csvt:implicit <test120-linked-metadata.json>;
  .

:test121 a csvt:PositiveValidationTest;
  mf:name "user-metadata not referencing file";
  rdfs:comment "User-specified metadata does not need to reference the starting CSV";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test121-user-metadata.json>;
  ];
  mf:action <test121.csv>;
  csvt:implicit <test121-ref.csv>,
    <test121-user-metadata.json>;
  .

:test122 a csvt:PositiveValidationTest;
  mf:name "link-metadata not describing file uses file-metadata";
  rdfs:comment "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  csvt:httpLink "<test122-linked-metadata.json>; rel=\"describedby\"";
  mf:action <test122.csv>;
  csvt:implicit <test122-linked-metadata.json>,
    <test122.csv-metadata.json>;
  .

:test123 a csvt:PositiveValidationTest;
  mf:name "file-metadata not describing file uses directory-metadata";
  rdfs:comment "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test123/action.csv>;
  csvt:implicit <test123/action.csv-metadata.json>,
    <test123/metadata.json>;
  .

:test124 a csvt:NegativeValidationTest;
  mf:name "metadata with columns not matching csv titles";
  rdfs:comment "If not validating, and one schema has a name property but not a titles property, and the other has a titles property but not a name property.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test124-user-metadata.json>;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test124-user-metadata.json>;
  .

:test125 a csvt:WarningValidationTest;
  mf:name "required column with empty cell";
  rdfs:comment "If the column required annotation is true, add an error to the list of errors for the cell.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test125-metadata.json>;
  csvt:implicit <test125.csv>;
  .

:test126 a csvt:WarningValidationTest;
  mf:name "required column with cell matching null";
  rdfs:comment "if the string is the same as any one of the values of the column null annotation, then the resulting value is null. If the column separator annotation is null and the column required annotation is true, add an error to the list of errors for the cell.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test126-metadata.json>;
  csvt:implicit <test126.csv>;
  .

:test127 a csvt:NegativeValidationTest;
  mf:name "incompatible table";
  rdfs:comment "if TM is not compatible with EM validators must raise an error, other processors must generate a warning and continue processing";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test127-metadata.json>;
  csvt:implicit <test127.csv>;
  .

:test128 a csvt:NegativeValidationTest;
  mf:name "duplicate column names";
  rdfs:comment "The name properties of the column descriptions MUST be unique within a given table description.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test128-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test129 a csvt:WarningValidationTest;
  mf:name "columnn name as integer";
  rdfs:comment "This (name) MUST be a string and this property has no default value, which means it MUST be ignored if the supplied value is not a string.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test129-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test130 a csvt:WarningValidationTest;
  mf:name "invalid column name";
  rdfs:comment "column names are restricted as defined in Variables in [URI-TEMPLATE] ";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test130-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test131 a csvt:WarningValidationTest;
  mf:name "invalid column name";
  rdfs:comment "column names are restricted ... names beginning with '_' are reserved by this specification and MUST NOT be used within metadata documents.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test131-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test132 a csvt:PositiveValidationTest;
  mf:name "name annotation from title percent encoded";
  rdfs:comment "If there is no name property defined on this column, the first titles value having the same language tag as default language, or und or if no default language is specified, becomes the name annotation for the described column. This annotation MUST be percent-encoded as necessary to conform to the syntactic requirements defined in [RFC3986]";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test132-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test133 a csvt:NegativeValidationTest;
  mf:name "virtual before non-virtual";
  rdfs:comment "If present, a virtual column MUST appear after all other non-virtual column definitions.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test133-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test134 a csvt:NegativeValidationTest;
  mf:name "context in common property";
  rdfs:comment "A metadata document MUST NOT add a new context";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test134-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test135 a csvt:NegativeValidationTest;
  mf:name "@list value";
  rdfs:comment "Values MUST NOT use list objects or set objects.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test135-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test136 a csvt:NegativeValidationTest;
  mf:name "@set value";
  rdfs:comment "Values MUST NOT use list objects or set objects.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test136-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test137 a csvt:NegativeValidationTest;
  mf:name "@type out of range (as datatype)";
  rdfs:comment "The value of any @id or @type contained within a metadata document MUST NOT be a blank node.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test137-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test138 a csvt:NegativeValidationTest;
  mf:name "@type out of range (as node type)";
  rdfs:comment "The value of any @id or @type contained within a metadata document MUST NOT be a blank node.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test138-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test139 a csvt:NegativeValidationTest;
  mf:name "@type out of range (as node type) - string";
  rdfs:comment "The value of any member of @type MUST be either a term defined in [csvw-context], a prefixed name where the prefix is a term defined in [csvw-context], or an absolute URL.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test139-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test140 a csvt:NegativeValidationTest;
  mf:name "@type out of range (as node type) - integer";
  rdfs:comment "The value of any member of @type MUST be either a term defined in [csvw-context], a prefixed name where the prefix is a term defined in [csvw-context], or an absolute URL.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test140-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test141 a csvt:NegativeValidationTest;
  mf:name "@id out of range (as node type) - bnode";
  rdfs:comment "The value of any @id or @type contained within a metadata document MUST NOT be a blank node.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test141-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test142 a csvt:NegativeValidationTest;
  mf:name "@value with @language and @type";
  rdfs:comment "If a @value property is used on an object, that object MUST NOT have any other properties aside from either @type or @language, and MUST NOT have both @type and @language as properties. The value of the @value property MUST be a string, number, or boolean value.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test142-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test143 a csvt:NegativeValidationTest;
  mf:name "@value with extra properties";
  rdfs:comment "If a @value property is used on an object, that object MUST NOT have any other properties aside from either @type or @language, and MUST NOT have both @type and @language as properties. The value of the @value property MUST be a string, number, or boolean value.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test143-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test144 a csvt:NegativeValidationTest;
  mf:name "@language outside of @value";
  rdfs:comment "A @language property MUST NOT be used on an object unless it also has a @value property.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test144-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test145 a csvt:NegativeValidationTest;
  mf:name "@value with invalid @language";
  rdfs:comment "If a @language property is used, it MUST have a string value that adheres to the syntax defined in [BCP47], or be null.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test145-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test146 a csvt:NegativeValidationTest;
  mf:name "Invalid faux-keyword";
  rdfs:comment "Aside from @value, @type, @language, and @id, the properties used on an object MUST NOT start with @.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test146-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test147 a csvt:NegativeValidationTest;
  mf:name "title incompatible with title on case";
  rdfs:comment "If there is a non-empty case-sensitive intersection between the titles values, where matches must have a matching language; und matches any language, and languages match if they are equal when truncated, as defined in [BCP47], to the length of the shortest language tag.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test147-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test148 a csvt:NegativeValidationTest;
  mf:name "title incompatible with title on language";
  rdfs:comment "If there is a non-empty case-sensitive intersection between the titles values, where matches must have a matching language; und matches any language, and languages match if they are equal when truncated, as defined in [BCP47], to the length of the shortest language tag.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test148-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test149 a csvt:PositiveValidationTest;
  mf:name "title compatible with title on less specific language";
  rdfs:comment "If there is a non-empty case-sensitive intersection between the titles values, where matches must have a matching language; und matches any language, and languages match if they are equal when truncated, as defined in [BCP47], to the length of the shortest language tag.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test149-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test150 a csvt:NegativeValidationTest;
  mf:name "non-builtin datatype (datatype value)";
  rdfs:comment "If the value of this property is a string, it must be one of the built-in datatypes defined in section 5.11.1 Built-in Datatypes or an absolute URL";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test150-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test151 a csvt:NegativeValidationTest;
  mf:name "non-builtin datatype (base value)";
  rdfs:comment "If the value of this property is a string, it MUST be one of the built-in datatypes";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test151-metadata.json>;
  csvt:implicit <tree-ops.csv>;
  .

:test152 a csvt:PositiveValidationTest;
  mf:name "string format (valid combinations)";
  rdfs:comment "If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test152-metadata.json>;
  csvt:implicit <test152.csv>;
  .

:test153 a csvt:NegativeValidationTest;
  mf:name "string format (bad format string)";
  rdfs:comment "If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test153-metadata.json>;
  csvt:implicit <test153.csv>;
  .

:test154 a csvt:WarningValidationTest;
  mf:name "string format (value not matching format)";
  rdfs:comment "If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test154-metadata.json>;
  csvt:implicit <test154.csv>;
  .

:test155 a csvt:PositiveValidationTest;
  mf:name "number format (valid combinations)";
  rdfs:comment "If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test155-metadata.json>;
  csvt:implicit <test155.csv>;
  .

:test156 a csvt:NegativeValidationTest;
  mf:name "number format (bad format string)";
  rdfs:comment "If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test156-metadata.json>;
  csvt:implicit <test156.csv>;
  .

:test157 a csvt:WarningValidationTest;
  mf:name "number format (value not matching format)";
  rdfs:comment "If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test157-metadata.json>;
  csvt:implicit <test157.csv>;
  .

:test158 a csvt:PositiveValidationTest;
  mf:name "number format (valid combinations)";
  rdfs:comment "Numeric dataype with object format";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test158-metadata.json>;
  csvt:implicit <test158.csv>;
  .

:test159 a csvt:NegativeValidationTest;
  mf:name "number format (bad pattern format string)";
  rdfs:comment "If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test159-metadata.json>;
  csvt:implicit <test159.csv>;
  .

:test160 a csvt:WarningValidationTest;
  mf:name "number format (not matching values with pattern)";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test160-metadata.json>;
  csvt:implicit <test160.csv>;
  .

:test161 a csvt:WarningValidationTest;
  mf:name "number format (not matching values without pattern)";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test161-metadata.json>;
  csvt:implicit <test161.csv>;
  .

:test162 a csvt:WarningValidationTest;
  mf:name "numeric format (consecutive groupChar)";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed contains two consecutive groupChar strings";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test162-metadata.json>;
  csvt:implicit <test162.csv>;
  .

:test163 a csvt:WarningValidationTest;
  mf:name "integer datatype with decimalChar";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed contains the decimalChar, if the datatype base is integer or one of its sub-values";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test163-metadata.json>;
  csvt:implicit <test163.csv>;
  .

:test164 a csvt:WarningValidationTest;
  mf:name "decimal datatype with exponent";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, if the datatype base is decimal or one of its sub-values";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test164-metadata.json>;
  csvt:implicit <test164.csv>;
  .

:test165 a csvt:WarningValidationTest;
  mf:name "decimal type with NaN";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, is one of the special values NaN, INF, or -INF, if the datatype base is decimal or one of its sub-values";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test165-metadata.json>;
  csvt:implicit <test165.csv>;
  .

:test166 a csvt:WarningValidationTest;
  mf:name "decimal type with INF";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, is one of the special values NaN, INF, or -INF, if the datatype base is decimal or one of its sub-values";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test166-metadata.json>;
  csvt:implicit <test166.csv>;
  .

:test167 a csvt:WarningValidationTest;
  mf:name "decimal type with -INF";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, is one of the special values NaN, INF, or -INF, if the datatype base is decimal or one of its sub-values";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test167-metadata.json>;
  csvt:implicit <test167.csv>;
  .

:test168 a csvt:PositiveValidationTest;
  mf:name "decimal with implicit groupChar";
  rdfs:comment "When parsing the string value of a cell against this format specification, implementations MUST recognise and parse numbers";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test168-metadata.json>;
  csvt:implicit <test168.csv>;
  .

:test169 a csvt:WarningValidationTest;
  mf:name "invalid decimal";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test169-metadata.json>;
  csvt:implicit <test169.csv>;
  .

:test170 a csvt:PositiveValidationTest;
  mf:name "decimal with percent";
  rdfs:comment "Implementations MUST use the sign, exponent, percent, and per-mille signs when parsing the string value of a cell to provide the value of the cell";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test170-metadata.json>;
  csvt:implicit <test170.csv>;
  .

:test171 a csvt:PositiveValidationTest;
  mf:name "decimal with per-mille";
  rdfs:comment "Implementations MUST use the sign, exponent, percent, and per-mille signs when parsing the string value of a cell to provide the value of the cell";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test171-metadata.json>;
  csvt:implicit <test171.csv>;
  .

:test172 a csvt:WarningValidationTest;
  mf:name "invalid byte";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test172-metadata.json>;
  csvt:implicit <test172.csv>;
  .

:test173 a csvt:WarningValidationTest;
  mf:name "invald unsignedLong";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test173-metadata.json>;
  csvt:implicit <test173.csv>;
  .

:test174 a csvt:WarningValidationTest;
  mf:name "invalid unsignedShort";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test174-metadata.json>;
  csvt:implicit <test174.csv>;
  .

:test175 a csvt:WarningValidationTest;
  mf:name "invalid unsignedByte";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test175-metadata.json>;
  csvt:implicit <test175.csv>;
  .

:test176 a csvt:WarningValidationTest;
  mf:name "invalid positiveInteger";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test176-metadata.json>;
  csvt:implicit <test176.csv>;
  .

:test177 a csvt:WarningValidationTest;
  mf:name "invalid negativeInteger";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test177-metadata.json>;
  csvt:implicit <test177.csv>;
  .

:test178 a csvt:WarningValidationTest;
  mf:name "invalid nonPositiveInteger";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test178-metadata.json>;
  csvt:implicit <test178.csv>;
  .

:test179 a csvt:WarningValidationTest;
  mf:name "invalid nonNegativeInteger";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test179-metadata.json>;
  csvt:implicit <test179.csv>;
  .

:test180 a csvt:WarningValidationTest;
  mf:name "invalid double";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test180-metadata.json>;
  csvt:implicit <test180.csv>;
  .

:test181 a csvt:WarningValidationTest;
  mf:name "invalid number";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test181-metadata.json>;
  csvt:implicit <test181.csv>;
  .

:test182 a csvt:WarningValidationTest;
  mf:name "invalid float";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test182-metadata.json>;
  csvt:implicit <test182.csv>;
  .

:test183 a csvt:PositiveValidationTest;
  mf:name "boolean format (valid combinations)";
  rdfs:comment "If the datatype base for a cell is boolean, the datatype format annotation provides the true and false values expected, separated by `|`.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test183-metadata.json>;
  csvt:implicit <test183.csv>;
  .

:test184 a csvt:NegativeValidationTest;
  mf:name "boolean format (bad format string)";
  rdfs:comment "If the datatype base for a cell is boolean, the datatype format annotation provides the true and false values expected, separated by `|`.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test184-metadata.json>;
  csvt:implicit <test184.csv>;
  .

:test185 a csvt:WarningValidationTest;
  mf:name "boolean format (value not matching format)";
  rdfs:comment "If the datatype base for a cell is boolean, the datatype format annotation provides the true and false values expected, separated by `|`.";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test185-metadata.json>;
  csvt:implicit <test185.csv>;
  .

:test186 a csvt:WarningValidationTest;
  mf:name "boolean format (not matching datatype)";
  rdfs:comment "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed";
  rdft:approval rdft:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test186-metadata.json>;
  csvt:implicit <test186.csv>;
  .
