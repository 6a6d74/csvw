# CSV+ tests
## Distributed under both the W3C Test Suite License[1] and the W3C 3-
## clause BSD License[2]. To contribute to a W3C Test Suite, see the
## policies and contribution forms [3]
##
## 1. http://www.w3.org/Consortium/Legal/2008/04-testsuite-license
## 2. http://www.w3.org/Consortium/Legal/2008/03-bsd-license
## 3. http://www.w3.org/2004/10/27-testcases
##
## Test types (for now)
## * CsvToJsonTest  - tests CSV evaluation to JSON
## * CsvToRdfTest   - tests CSV evaluation to RDF using graph isomorphism
## * CsvSparqlTest - tests CSV evaulation to RDF using SPARQL ASK query

@prefix : <manifest-validation#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf:   <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix csvt: <http://w3c.github.io/csvw/tests/vocab#> .

<manifest-validation>  a mf:Manifest ;

  rdfs:label "CSVW Validation Tests";
  rdfs:comment "Tests CSV validation using metadata.";
  mf:entries (
    :test001 :test002 :test003 :test005 :test006 :test007 :test008 :test009 :test010 :test011
    :test012 :test013 :test014 :test015 :test016 :test017 :test018 :test019 :test020 :test021
    :test022 :test023 :test024 :test025 :test026 :test027 :test028 :test029 :test030 :test031
    :test032 :test033 :test034 :test035 :test036 :test037 :test038 :test039 :test040 :test041
    :test042 :test043 :test044 :test045 :test046 :test047 :test048 :test049 :test050 :test051
    :test052 :test054 :test055 :test056 :test057 :test058 :test059 :test060 :test061 :test062
    :test063 :test065 :test066 :test067 :test068 :test069 :test070 :test071 :test072 :test073
    :test074 :test075 :test076 :test077 :test078 :test079 :test080 :test081 :test082 :test083
    :test084 :test085 :test086 :test087 :test088
  ) .

:test001 a csvt:PositiveValidationTest;
  mf:name "Simple table";
  rdfs:comment "The simplest possible table without metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test001.csv>;
  .

:test002 a csvt:PositiveValidationTest;
  mf:name "Quoted field";
  rdfs:comment "Table with one quoted field without metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test002.csv>;
  .

:test003 a csvt:PositiveValidationTest;
  mf:name "Surrounding spaces";
  rdfs:comment "Table with whitespace before and after every field without metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test003.csv>;
  .

:test005 a csvt:PositiveValidationTest;
  mf:name "Identifier references";
  rdfs:comment "A table with entity identifiers and references to other entities without metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test005.csv>;
  .

:test006 a csvt:PositiveValidationTest;
  mf:name "No identifiers";
  rdfs:comment "Records contain two entities with relationships which are duplicated without metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test006.csv>;
  .

:test007 a csvt:PositiveValidationTest;
  mf:name "Joined table with unique identifiers";
  rdfs:comment "Joined data with identified records without metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test007.csv>;
  .

:test008 a csvt:PositiveValidationTest;
  mf:name "Microsyntax - internal field separator";
  rdfs:comment "One field has comma-separated values without metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test008.csv>;
  .

:test009 a csvt:PositiveValidationTest;
  mf:name "Microsyntax - formatted time";
  rdfs:comment "Field with parseable human formatted time without metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test009.csv>;
  .

:test010 a csvt:PositiveValidationTest;
  mf:name "Country-codes-and-names example";
  rdfs:comment "Country-codes-and-names example";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test010.csv>;
  .

:test011 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with metadata";
  rdfs:comment "tree-ops example with metadata. Processors should load metadata based on action URL.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test011/tree-ops.csv>;
  csvt:implicit <test011/tree-ops.csv-metadata.json>;
  .

:test012 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with directory metadata";
  rdfs:comment "tree-ops example with directory metadata. Processors should find directory-based metadata.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test012/tree-ops.csv>;
  csvt:implicit <test012/metadata.json>;
  .

:test013 a csvt:PositiveValidationTest;
  mf:name "tree-ops example from user metadata";
  rdfs:comment "tree-ops example from user metadata.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test013-user-metadata.json>;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test013-user-metadata.json>;
  .

:test014 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with linked metadata";
  rdfs:comment "tree-ops example with linked metadata. Processors load metadata from link header.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  csvt:httpLink "<linked-metadata.json>; rel=\"describedby\"";
  mf:action <test014/tree-ops.csv>;
  csvt:implicit <test014/linked-metadata.json>;
  .

:test015 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with user and directory metadata";
  rdfs:comment "tree-ops example with user and directory metadata. Processors should find directory-based metadata.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test015/user-metadata.json>;
  ];
  mf:action <test015/tree-ops.csv>;
  csvt:implicit <test015/user-metadata.json>,
    <test015/metadata.json>;
  .

:test016 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with linked and directory metadata";
  rdfs:comment "tree-ops example with linked and directory metadata. Processors should find link- and directory-based metadata.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  csvt:httpLink "<linked-metadata.json>; rel=\"describedby\"";
  mf:action <test016/tree-ops.csv>;
  csvt:implicit <test016/linked-metadata.json>,
    <test016/metadata.json>;
  .

:test017 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with file and directory metadata";
  rdfs:comment "tree-ops example with file and directory metadata. Processors should find file- and directory-based metadata.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test017/tree-ops.csv>;
  csvt:implicit <test017/tree-ops.csv-metadata.json>,
    <test017/metadata.json>;
  .

:test018 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with user, file and directory metadata";
  rdfs:comment "tree-ops example with user, file and directory metadata. Processors should find user-, file- and directory-based metadata.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test018/user-metadata.json>;
  ];
  mf:action <test018/tree-ops.csv>;
  csvt:implicit <test018/user-metadata.json>,
    <test018/tree-ops.csv-metadata.json>,
    <test018/metadata.json>;
  .

:test019 a csvt:PositiveValidationTest;
  mf:name "no header";
  rdfs:comment "If a CSV+ file does not include a header line, this MUST be specified using the header parameter.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <tree-ops.csv>;
  csvt:contentType "text/csv;header=absent";
  .

:test020 a csvt:PositiveValidationTest;
  mf:name "trim=start";
  rdfs:comment "If trim is true or start then whitespace from the start of values that are not enclosed MUST be removed from the value.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test020-metadata.json>;
  csvt:implicit <test020.csv>;
  .

:test021 a csvt:PositiveValidationTest;
  mf:name "trim=end";
  rdfs:comment "If trim is true or end then whitespace from the end of values that are not enclosed MUST be removed from the value.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test021-metadata.json>;
  csvt:implicit <test021.csv>;
  .

:test022 a csvt:PositiveValidationTest;
  mf:name "trim=true";
  rdfs:comment "If trim is true or start then whitespace from the start of values that are not enclosed MUST be removed from the value. If trim is true or end then whitespace from the end of values that are not enclosed MUST be removed from the value.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test022-metadata.json>;
  csvt:implicit <test022.csv>;
  .

:test023 a csvt:PositiveValidationTest;
  mf:name "dialect: header=false";
  rdfs:comment "A single boolean atomic property that, if true, sets the header row count flag to 1, and if false to 0, unless headerRowCount is provided, in which case the value provided for the header property is ignored.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test023-user-metadata.json>;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test023-user-metadata.json>;
  .

:test024 a csvt:PositiveValidationTest;
  mf:name "dialect: header=false and headerRowCount=1";
  rdfs:comment "A single boolean atomic property that, if true, sets the header row count flag to 1, and if false to 0, unless headerRowCount is provided, in which case the value provided for the header property is ignored.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test024-user-metadata.json>;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test024-user-metadata.json>;
  .

:test025 a csvt:PositiveValidationTest;
  mf:name "dialect: header=false and skipRows=1";
  rdfs:comment "Ignore header uses column definitions from metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test025-user-metadata.json>;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test025-user-metadata.json>;
  .

:test026 a csvt:PositiveValidationTest;
  mf:name "tree-ops example with directory metadata";
  rdfs:comment "tree-ops example with directory metadata. Processors should find directory-based metadata.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test026/metadata.json>;
  csvt:implicit <test026/tree-ops.csv>,
    <test026/metadata.json>;
  .

:test027 a csvt:PositiveValidationTest;
  mf:name "tree-ops minimal output";
  rdfs:comment "tree-ops example with metadata. Minimal output mode";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:metadata <test027-user-metadata.json>;
    csvt:minimal true;
  ];
  mf:action <tree-ops.csv>;
  csvt:implicit <test027-user-metadata.json>;
  .

:test028 a csvt:PositiveValidationTest;
  mf:name "countries.csv example";
  rdfs:comment "countries.csv example with no metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <countries.csv>;
  .

:test029 a csvt:PositiveValidationTest;
  mf:name "countries.csv minimal";
  rdfs:comment "countries.csv example with no metadata and minimal output";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <countries.csv>;
  .

:test030 a csvt:PositiveValidationTest;
  mf:name "countries.json example";
  rdfs:comment "countries.json from metadata";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <countries.json>;
  csvt:implicit <countries.csv>,
    <country_slice.csv>;
  .

:test031 a csvt:PositiveValidationTest;
  mf:name "countries.json example minimal output";
  rdfs:comment "countries.json from metadata minimal output";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <countries.json>;
  csvt:implicit <countries.csv>,
    <country_slice.csv>;
  .

:test032 a csvt:PositiveValidationTest;
  mf:name "events-listing.csv example";
  rdfs:comment "events-listing example with file metadata, virtual columns and multiple subjects per row";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test032/metadata.json>;
  csvt:implicit <test032/events-listing.csv>,
    <test032/metadata.json-metadata.json>;
  .

:test033 a csvt:PositiveValidationTest;
  mf:name "events-listing.csv minimal output";
  rdfs:comment "events-listing example with file metadata, virtual columns and multiple subjects per row; minimal output";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <test033/metadata.json>;
  csvt:implicit <test033/events-listing.csv>,
    <test033/metadata.json-metadata.json>;
  .

:test034 a csvt:PositiveValidationTest;
  mf:name "roles example";
  rdfs:comment "Public Sector Roles example with referenced schemas";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test034/metadata.json>;
  csvt:implicit <test034/senior-roles.csv>,
    <test034/senior-roles.json>,
    <test034/junior-roles.csv>,
    <test034/junior-roles.json>,
    <test034/gov.uk/professions.csv>;
  .

:test035 a csvt:PositiveValidationTest;
  mf:name "roles minimal";
  rdfs:comment "Public Sector Roles example with referenced schemas; minimal output";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <test035/metadata.json>;
  csvt:implicit <test035/senior-roles.csv>,
    <test035/senior-roles.json>,
    <test035/junior-roles.csv>,
    <test035/junior-roles.json>,
    <test035/gov.uk/professions.csv>;
  .

:test036 a csvt:PositiveValidationTest;
  mf:name "tree-ops-ext example";
  rdfs:comment "tree-ops extended example";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test036/tree-ops-ext.csv>;
  csvt:implicit <test036/tree-ops-ext.csv-metadata.json>;
  .

:test037 a csvt:PositiveValidationTest;
  mf:name "tree-ops-ext minimal";
  rdfs:comment "tree-ops extended example; minimal output";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
    csvt:minimal true;
  ];
  mf:action <test037/tree-ops-ext.csv>;
  csvt:implicit <test037/tree-ops-ext.csv-metadata.json>;
  .

:test038 a csvt:PositiveValidationTest;
  mf:name "inherited properties propagation";
  rdfs:comment "Setting inherited properties at different levels inherit to cell";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test038-metadata.json>;
  csvt:implicit <test038.csv>;
  .

:test039 a csvt:PositiveValidationTest;
  mf:name "valid inherited properties";
  rdfs:comment "Different combinations of valid inherited properties";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test039-metadata.json>;
  csvt:implicit <test039.csv>;
  .

:test040 a csvt:WarningValidationTest;
  mf:name "invalid null";
  rdfs:comment "Metadata generates warning and uses default with invalid null value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test040-metadata.json>;
  csvt:implicit <test040.csv>;
  .

:test041 a csvt:WarningValidationTest;
  mf:name "invalid lang";
  rdfs:comment "Metadata generates warning and uses default with invalid lang value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test041-metadata.json>;
  csvt:implicit <test041.csv>;
  .

:test042 a csvt:WarningValidationTest;
  mf:name "invalid textDirection";
  rdfs:comment "Metadata generates warning and uses default with invalid textDirection";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test042-metadata.json>;
  csvt:implicit <test042.csv>;
  .

:test043 a csvt:WarningValidationTest;
  mf:name "invalid separator";
  rdfs:comment "Metadata generates warning and uses default with invalid separator";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test043-metadata.json>;
  csvt:implicit <test043.csv>;
  .

:test044 a csvt:WarningValidationTest;
  mf:name "invalid ordered";
  rdfs:comment "Metadata generates warning and uses default with invalid ordered";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test044-metadata.json>;
  csvt:implicit <test044.csv>;
  .

:test045 a csvt:WarningValidationTest;
  mf:name "invalid default";
  rdfs:comment "Metadata generates warning and uses default with invalid default";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test045-metadata.json>;
  csvt:implicit <test045.csv>;
  .

:test046 a csvt:WarningValidationTest;
  mf:name "invalid dataype";
  rdfs:comment "Metadata generates warning and uses default with invalid dataype";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test046-metadata.json>;
  csvt:implicit <test046.csv>;
  .

:test047 a csvt:WarningValidationTest;
  mf:name "invalid aboutUrl";
  rdfs:comment "Metadata generates warning and uses default with invalid aboutUrl";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test047-metadata.json>;
  csvt:implicit <test047.csv>;
  .

:test048 a csvt:WarningValidationTest;
  mf:name "invalid propertyUrl";
  rdfs:comment "Metadata generates warning and uses default with invalid propertyUrl";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test048-metadata.json>;
  csvt:implicit <test048.csv>;
  .

:test049 a csvt:WarningValidationTest;
  mf:name "invalid valueUrl";
  rdfs:comment "Metadata generates warning and uses default with invalid valueUrl";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test049-metadata.json>;
  csvt:implicit <test049.csv>;
  .

:test050 a csvt:PositiveValidationTest;
  mf:name "dialect: delimiter";
  rdfs:comment "Recognizes tab-separated-values with appropriate delimiter";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test050-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test051 a csvt:PositiveValidationTest;
  mf:name "dialect: commentPrefix in header";
  rdfs:comment "Adds comments when found in skipRows";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test051-metadata.json>;
  csvt:implicit <test051.csv>;
  .

:test052 a csvt:PositiveValidationTest;
  mf:name "dialect: commentPrefix in rows";
  rdfs:comment "Adds comments when found in content";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test052-metadata.json>;
  csvt:implicit <test052.csv>;
  .

:test054 a csvt:PositiveValidationTest;
  mf:name "dialect: skipColumns";
  rdfs:comment "Ignores skipped columns";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test054-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test055 a csvt:PositiveValidationTest;
  mf:name "dialect: skipBlankRows";
  rdfs:comment "Ignores rows in which all columns are empty";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test055-metadata.json>;
  csvt:implicit <test055.csv>;
  .

:test056 a csvt:PositiveValidationTest;
  mf:name "dialect: skipInitialSpace";
  rdfs:comment "Equivalent to trim=start";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test056-metadata.json>;
  csvt:implicit <test056.csv>;
  .

:test057 a csvt:PositiveValidationTest;
  mf:name "dialect as URL reference";
  rdfs:comment "Loads a dialect description if referenced using a URL";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test057-metadata.json>;
  csvt:implicit <test057.csv>,
    <test057-dialect.json>;
  .

:test058 a csvt:PositiveValidationTest;
  mf:name "table dialect vs tablegroup dialect";
  rdfs:comment "A dialect defined in a Table completely overrides that defined in a TableGroup";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test058-metadata.json>;
  csvt:implicit <test058.csv>;
  .

:test059 a csvt:WarningValidationTest;
  mf:name "dialect: invalid commentPrefix";
  rdfs:comment "Metadata generates warning and uses default with invalid commentPrefix value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test059-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test060 a csvt:WarningValidationTest;
  mf:name "dialect: invalid delimiter";
  rdfs:comment "Metadata generates warning and uses default with invalid delimiter value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test060-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test061 a csvt:WarningValidationTest;
  mf:name "dialect: invalid doubleQuote";
  rdfs:comment "Metadata generates warning and uses default with invalid doubleQuote value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test061-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test062 a csvt:WarningValidationTest;
  mf:name "dialect: invalid encoding";
  rdfs:comment "Metadata generates warning and uses default with invalid encoding value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test062-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test063 a csvt:WarningValidationTest;
  mf:name "dialect: invalid header";
  rdfs:comment "Metadata generates warning and uses default with invalid header value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test063-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test065 a csvt:WarningValidationTest;
  mf:name "dialect: invalid headerRowCount";
  rdfs:comment "Metadata generates warning and uses default with invalid headerRowCount value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test065-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test066 a csvt:WarningValidationTest;
  mf:name "dialect: invalid lineTerminators";
  rdfs:comment "Metadata generates warning and uses default with invalid lineTerminators value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test066-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test067 a csvt:WarningValidationTest;
  mf:name "dialect: invalid quoteChar";
  rdfs:comment "Metadata generates warning and uses default with invalid quoteChar value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test067-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test068 a csvt:WarningValidationTest;
  mf:name "dialect: invalid skipBlankRows";
  rdfs:comment "Metadata generates warning and uses default with invalid skipBlankRows value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test068-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test069 a csvt:WarningValidationTest;
  mf:name "dialect: invalid skipColumns";
  rdfs:comment "Metadata generates warning and uses default with invalid skipColumns value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test069-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test070 a csvt:WarningValidationTest;
  mf:name "dialect: invalid skipInitialSpace";
  rdfs:comment "Metadata generates warning and uses default with invalid skipInitialSpace value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test070-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test071 a csvt:WarningValidationTest;
  mf:name "dialect: invalid skipRows";
  rdfs:comment "Metadata generates warning and uses default with invalid skipRows value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test071-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test072 a csvt:WarningValidationTest;
  mf:name "dialect: invalid trim";
  rdfs:comment "Metadata generates warning and uses default with invalid trim value";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test072-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test073 a csvt:WarningValidationTest;
  mf:name "invalid @language";
  rdfs:comment "The value of @language MUST be a valid BCP47 language code";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test073-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test074 a csvt:NegativeValidationTest;
  mf:name "empty tables";
  rdfs:comment "Compliant application must raise an error if this array does not contain one or more table descriptions.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test074-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test075 a csvt:WarningValidationTest;
  mf:name "invalid tableGroup tableDirection";
  rdfs:comment "An atomic property that must have a single string value that is one of "rtl", "ltr" or "default".";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test075-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test076 a csvt:WarningValidationTest;
  mf:name "invalid table tableDirection";
  rdfs:comment "An atomic property that must have a single string value that is one of "rtl", "ltr" or "default".";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test076-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test077 a csvt:NegativeValidationTest;
  mf:name "invalid tableGroup @id";
  rdfs:comment "It must not start with _:.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test077-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test078 a csvt:NegativeValidationTest;
  mf:name "invalid table @id";
  rdfs:comment "It must not start with _:.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test078-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test079 a csvt:NegativeValidationTest;
  mf:name "invalid schema @id";
  rdfs:comment "It must not start with _:.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test079-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test080 a csvt:NegativeValidationTest;
  mf:name "invalid column @id";
  rdfs:comment "It must not start with _:.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test080-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test081 a csvt:NegativeValidationTest;
  mf:name "invalid dialect @id";
  rdfs:comment "It must not start with _:.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test081-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test082 a csvt:NegativeValidationTest;
  mf:name "invalid template @id";
  rdfs:comment "It must not start with _:.";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test082-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test083 a csvt:NegativeValidationTest;
  mf:name "invalid tableGroup @type";
  rdfs:comment "If included @type must be TableGroup";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test083-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test084 a csvt:NegativeValidationTest;
  mf:name "invalid table @type";
  rdfs:comment "If included @type must be Table";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test084-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test085 a csvt:NegativeValidationTest;
  mf:name "invalid schema @type";
  rdfs:comment "If included @type must be Schema";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test085-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test086 a csvt:NegativeValidationTest;
  mf:name "invalid column @type";
  rdfs:comment "If included @type must be Column";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test086-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test087 a csvt:NegativeValidationTest;
  mf:name "invalid dialect @type";
  rdfs:comment "If included @type must be Dialect";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test087-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .

:test088 a csvt:NegativeValidationTest;
  mf:name "invalid template @type";
  rdfs:comment "If included @type must be Template";
  csvt:approval csvt:Proposed;
  csvt:option [
    csvt:noProv true;
  ];
  mf:action <test088-metadata.json>;
  csvt:implicit <tree-ops.tsv>;
  .
