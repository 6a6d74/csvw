{
  "@context": {
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "mf": "http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#",
    "mq": "http://www.w3.org/2001/sw/DataAccess/tests/test-query#",
    "csvt": "http://w3c.github.io/csvw/test-vocab#",
    "id": "@id",
    "type": "@type",
    "action": {
      "@id": "mf:action",
      "@type": "@id"
    },
    "approval": {
      "@id": "rdft:approval",
      "@type": "@id"
    },
    "comment": "rdfs:comment",
    "contentType": "csvt:contentType",
    "entries": {
      "@id": "mf:entries",
      "@type": "@id",
      "@container": "@list"
    },
    "httpLink": "csvt:httpLink",
    "implicit": {
      "@id": "mf:implicit",
      "@type": "@id",
      "@container": "@set"
    },
    "label": "rdfs:label",
    "metadata": {
      "@id": "csvt:metadata",
      "@type": "@id"
    },
    "minimal": "csvt:minimal",
    "name": "mf:name",
    "noProv": "csvt:noProv",
    "option": "csvt:option",
    "result": {
      "@id": "mf:result",
      "@type": "@id"
    }
  },
  "id": "manifest-validation",
  "type": "mf:Manifest",
  "label": "CSVW Validation Tests",
  "comment": "Tests CSV validation using metadata.",
  "entries": [
    {
      "id": "manifest-validation#test001",
      "type": "csvt:PositiveValidationTest",
      "name": "Simple table",
      "comment": "The simplest possible table without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test001.csv"
    },
    {
      "id": "manifest-validation#test002",
      "type": "csvt:PositiveValidationTest",
      "name": "Quoted field",
      "comment": "Table with one quoted field without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test002.csv"
    },
    {
      "id": "manifest-validation#test003",
      "type": "csvt:PositiveValidationTest",
      "name": "Surrounding spaces",
      "comment": "Table with whitespace before and after every field without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test003.csv"
    },
    {
      "id": "manifest-validation#test005",
      "type": "csvt:PositiveValidationTest",
      "name": "Identifier references",
      "comment": "A table with entity identifiers and references to other entities without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test005.csv"
    },
    {
      "id": "manifest-validation#test006",
      "type": "csvt:PositiveValidationTest",
      "name": "No identifiers",
      "comment": "Records contain two entities with relationships which are duplicated without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test006.csv"
    },
    {
      "id": "manifest-validation#test007",
      "type": "csvt:PositiveValidationTest",
      "name": "Joined table with unique identifiers",
      "comment": "Joined data with identified records without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test007.csv"
    },
    {
      "id": "manifest-validation#test008",
      "type": "csvt:PositiveValidationTest",
      "name": "Microsyntax - internal field separator",
      "comment": "One field has comma-separated values without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test008.csv"
    },
    {
      "id": "manifest-validation#test009",
      "type": "csvt:PositiveValidationTest",
      "name": "Microsyntax - formatted time",
      "comment": "Field with parseable human formatted time without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test009.csv"
    },
    {
      "id": "manifest-validation#test010",
      "type": "csvt:PositiveValidationTest",
      "name": "Country-codes-and-names example",
      "comment": "Country-codes-and-names example",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test010.csv"
    },
    {
      "id": "manifest-validation#test011",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops example with metadata",
      "comment": "tree-ops example with metadata. Processors should load metadata based on action URL.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test011/tree-ops.csv",
      "implicit": [
        "test011/tree-ops.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test012",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops example with directory metadata",
      "comment": "tree-ops example with directory metadata. Processors should find directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test012/tree-ops.csv",
      "implicit": [
        "test012/metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test013",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops example from user metadata",
      "comment": "tree-ops example from user metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test013-user-metadata.json"
      },
      "action": "tree-ops.csv",
      "implicit": [
        "test013-user-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test014",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops example with linked metadata",
      "comment": "tree-ops example with linked metadata. Processors load metadata from link header.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test014/tree-ops.csv",
      "implicit": [
        "test014/linked-metadata.json"
      ],
      "httpLink": "<linked-metadata.json>; rel=\"describedby\""
    },
    {
      "id": "manifest-validation#test015",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops example with user and directory metadata",
      "comment": "tree-ops example with user and directory metadata. Processors should find directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test015/user-metadata.json"
      },
      "action": "test015/tree-ops.csv",
      "implicit": [
        "test015/user-metadata.json",
        "test015/metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test016",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops example with linked and directory metadata",
      "comment": "tree-ops example with linked and directory metadata. Processors should find link- and directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test016/tree-ops.csv",
      "implicit": [
        "test016/linked-metadata.json",
        "test016/metadata.json"
      ],
      "httpLink": "<linked-metadata.json>; rel=\"describedby\""
    },
    {
      "id": "manifest-validation#test017",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops example with file and directory metadata",
      "comment": "tree-ops example with file and directory metadata. Processors should find file- and directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test017/tree-ops.csv",
      "implicit": [
        "test017/tree-ops.csv-metadata.json",
        "test017/metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test018",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops example with user, file and directory metadata",
      "comment": "tree-ops example with user, file and directory metadata. Processors should find user-, file- and directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test018/user-metadata.json"
      },
      "action": "test018/tree-ops.csv",
      "implicit": [
        "test018/user-metadata.json",
        "test018/tree-ops.csv-metadata.json",
        "test018/metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test019",
      "type": "csvt:PositiveValidationTest",
      "name": "no header",
      "comment": "If a CSV+ file does not include a header line, this MUST be specified using the `header` parameter.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "tree-ops.csv",
      "contentType": "text/csv;header=absent"
    },
    {
      "id": "manifest-validation#test020",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: trim=start",
      "comment": "If `trim` is `true` or \"start\" then whitespace from the start of values that are not enclosed MUST be removed from the value.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test020-metadata.json",
      "implicit": [
        "test020.csv"
      ]
    },
    {
      "id": "manifest-validation#test021",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: trim=end",
      "comment": "If `trim` is `true` or \"end\" then whitespace from the end of values that are not enclosed MUST be removed from the value.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test021-metadata.json",
      "implicit": [
        "test021.csv"
      ]
    },
    {
      "id": "manifest-validation#test022",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: trim=true",
      "comment": "If `trim` is `true` or \"start\" then whitespace from the start of values that are not enclosed MUST be removed from the value. If `trim` is `true` or \"end\" then whitespace from the end of values that are not enclosed MUST be removed from the value.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test022-metadata.json",
      "implicit": [
        "test022.csv"
      ]
    },
    {
      "id": "manifest-validation#test023",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: header=false",
      "comment": "If `true`, sets the `header row count` flag to 1, and if `false` to 0, unless `headerRowCount` is provided, in which case the value provided for the `header` property is ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test023-user-metadata.json"
      },
      "action": "tree-ops.csv",
      "implicit": [
        "test023-user-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test024",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: header=false and headerRowCount=1",
      "comment": "If `true`, sets the `header row count` flag to 1, and if `false` to 0, unless `headerRowCount` is provided, in which case the value provided for the `header` property is ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test024-user-metadata.json"
      },
      "action": "tree-ops.csv",
      "implicit": [
        "test024-user-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test025",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: header=false and skipRows=1",
      "comment": "Ignore header uses column definitions from metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test025-user-metadata.json"
      },
      "action": "tree-ops.csv",
      "implicit": [
        "test025-user-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test026",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops example with directory metadata",
      "comment": "tree-ops example with directory metadata. Processors should find directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test026/metadata.json",
      "implicit": [
        "test026/tree-ops.csv",
        "test026/metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test027",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops minimal output",
      "comment": "tree-ops example with metadata. Minimal output mode",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test027-user-metadata.json",
        "minimal": true
      },
      "action": "tree-ops.csv",
      "implicit": [
        "test027-user-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test028",
      "type": "csvt:PositiveValidationTest",
      "name": "countries.csv example",
      "comment": "countries.csv example with no metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "countries.csv"
    },
    {
      "id": "manifest-validation#test029",
      "type": "csvt:PositiveValidationTest",
      "name": "countries.csv minimal",
      "comment": "countries.csv example with no metadata and minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "countries.csv"
    },
    {
      "id": "manifest-validation#test030",
      "type": "csvt:PositiveValidationTest",
      "name": "countries.json example",
      "comment": "countries.json from metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "countries.json",
      "implicit": [
        "countries.csv",
        "country_slice.csv"
      ]
    },
    {
      "id": "manifest-validation#test031",
      "type": "csvt:PositiveValidationTest",
      "name": "countries.json example minimal output",
      "comment": "countries.json from metadata minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "countries.json",
      "implicit": [
        "countries.csv",
        "country_slice.csv"
      ]
    },
    {
      "id": "manifest-validation#test032",
      "type": "csvt:PositiveValidationTest",
      "name": "events-listing.csv example",
      "comment": "events-listing example with file metadata, virtual columns and multiple subjects per row",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test032/metadata.json",
      "implicit": [
        "test032/events-listing.csv",
        "test032/metadata.json-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test033",
      "type": "csvt:PositiveValidationTest",
      "name": "events-listing.csv minimal output",
      "comment": "events-listing example with file metadata, virtual columns and multiple subjects per row; minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "test033/metadata.json",
      "implicit": [
        "test033/events-listing.csv",
        "test033/metadata.json-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test034",
      "type": "csvt:PositiveValidationTest",
      "name": "roles example",
      "comment": "Public Sector Roles example with referenced schemas",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test034/metadata.json",
      "implicit": [
        "test034/senior-roles.csv",
        "test034/junior-roles.csv",
        "test034/gov.uk/data/organizations.csv",
        "test034/gov.uk/data/professions.csv",
        "test034/gov.uk/schema/junior-roles.json",
        "test034/gov.uk/schema/senior-roles.json",
        "test034/gov.uk/schema/organizations.json",
        "test034/gov.uk/schema/professions.json"
      ]
    },
    {
      "id": "manifest-validation#test035",
      "type": "csvt:PositiveValidationTest",
      "name": "roles minimal",
      "comment": "Public Sector Roles example with referenced schemas; minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "test035/metadata.json",
      "implicit": [
        "test035/senior-roles.csv",
        "test035/junior-roles.csv",
        "test035/gov.uk/data/organizations.csv",
        "test035/gov.uk/data/professions.csv",
        "test035/gov.uk/schema/junior-roles.json",
        "test035/gov.uk/schema/senior-roles.json",
        "test035/gov.uk/schema/organizations.json",
        "test035/gov.uk/schema/professions.json"
      ]
    },
    {
      "id": "manifest-validation#test036",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops-ext example",
      "comment": "tree-ops extended example",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test036/tree-ops-ext.csv",
      "implicit": [
        "test036/tree-ops-ext.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test037",
      "type": "csvt:PositiveValidationTest",
      "name": "tree-ops-ext minimal",
      "comment": "tree-ops extended example; minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "test037/tree-ops-ext.csv",
      "implicit": [
        "test037/tree-ops-ext.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test038",
      "type": "csvt:PositiveValidationTest",
      "name": "inherited properties propagation",
      "comment": "Setting inherited properties at different levels inherit to cell",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test038-metadata.json",
      "implicit": [
        "test038.csv"
      ]
    },
    {
      "id": "manifest-validation#test039",
      "type": "csvt:PositiveValidationTest",
      "name": "valid inherited properties",
      "comment": "Different combinations of valid inherited properties",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test039-metadata.json",
      "implicit": [
        "test039.csv"
      ]
    },
    {
      "id": "manifest-validation#test040",
      "type": "csvt:WarningValidationTest",
      "name": "invalid null",
      "comment": "Metadata generates warning and uses default with invalid `null` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test040-metadata.json",
      "implicit": [
        "test040.csv"
      ]
    },
    {
      "id": "manifest-validation#test041",
      "type": "csvt:WarningValidationTest",
      "name": "invalid lang",
      "comment": "Metadata generates warning and uses default with invalid `lang` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test041-metadata.json",
      "implicit": [
        "test041.csv"
      ]
    },
    {
      "id": "manifest-validation#test042",
      "type": "csvt:WarningValidationTest",
      "name": "invalid textDirection",
      "comment": "Metadata generates warning and uses default with invalid `textDirection`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test042-metadata.json",
      "implicit": [
        "test042.csv"
      ]
    },
    {
      "id": "manifest-validation#test043",
      "type": "csvt:WarningValidationTest",
      "name": "invalid separator",
      "comment": "Metadata generates warning and uses default with invalid `separator`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test043-metadata.json",
      "implicit": [
        "test043.csv"
      ]
    },
    {
      "id": "manifest-validation#test044",
      "type": "csvt:WarningValidationTest",
      "name": "invalid ordered",
      "comment": "Metadata generates warning and uses default with invalid `ordered`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test044-metadata.json",
      "implicit": [
        "test044.csv"
      ]
    },
    {
      "id": "manifest-validation#test045",
      "type": "csvt:WarningValidationTest",
      "name": "invalid default",
      "comment": "Metadata generates warning and uses default with invalid `default`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test045-metadata.json",
      "implicit": [
        "test045.csv"
      ]
    },
    {
      "id": "manifest-validation#test046",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid dataype",
      "comment": "If the value of this property is a string, it must be one of the built-in datatypes defined in section 5.11.1 Built-in Datatypes or an absolute URL",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test046-metadata.json",
      "implicit": [
        "test046.csv"
      ]
    },
    {
      "id": "manifest-validation#test047",
      "type": "csvt:WarningValidationTest",
      "name": "invalid aboutUrl",
      "comment": "If the supplied value of a URI template property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test047-metadata.json",
      "implicit": [
        "test047.csv"
      ]
    },
    {
      "id": "manifest-validation#test048",
      "type": "csvt:WarningValidationTest",
      "name": "invalid propertyUrl",
      "comment": "If the supplied value of a URI template property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test048-metadata.json",
      "implicit": [
        "test048.csv"
      ]
    },
    {
      "id": "manifest-validation#test049",
      "type": "csvt:WarningValidationTest",
      "name": "invalid valueUrl",
      "comment": "If the supplied value of a URI template property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test049-metadata.json",
      "implicit": [
        "test049.csv"
      ]
    },
    {
      "id": "manifest-validation#test050",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: delimiter",
      "comment": "Recognizes tab-separated-values with appropriate `delimiter`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test050-metadata.json",
      "implicit": [
        "tree-ops.tsv"
      ]
    },
    {
      "id": "manifest-validation#test051",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: commentPrefix in header",
      "comment": "Adds comments when found in `skipRows`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test051-metadata.json",
      "implicit": [
        "test051.csv"
      ]
    },
    {
      "id": "manifest-validation#test052",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: commentPrefix in rows",
      "comment": "Adds comments when found in `content`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test052-metadata.json",
      "implicit": [
        "test052.csv"
      ]
    },
    {
      "id": "manifest-validation#test054",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: skipColumns",
      "comment": "Ignores skipped columns",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test054-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test055",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: skipBlankRows",
      "comment": "Ignores rows in which all columns are empty",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test055-metadata.json",
      "implicit": [
        "test055.csv"
      ]
    },
    {
      "id": "manifest-validation#test056",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect: skipInitialSpace",
      "comment": "Equivalent to` trim=\"start\"`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test056-metadata.json",
      "implicit": [
        "test056.csv"
      ]
    },
    {
      "id": "manifest-validation#test057",
      "type": "csvt:PositiveValidationTest",
      "name": "dialect as URL reference",
      "comment": "Loads a `dialect description` if referenced using a URL",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test057-metadata.json",
      "implicit": [
        "test057.csv",
        "test057-dialect.json"
      ]
    },
    {
      "id": "manifest-validation#test058",
      "type": "csvt:PositiveValidationTest",
      "name": "table dialect vs tablegroup dialect",
      "comment": "A dialect defined in a Table completely overrides that defined in a TableGroup",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test058-metadata.json",
      "implicit": [
        "test058.csv"
      ]
    },
    {
      "id": "manifest-validation#test059",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid commentPrefix",
      "comment": "Metadata generates warning and uses default with invalid `commentPrefix` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test059-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test060",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid delimiter",
      "comment": "Metadata generates warning and uses default with invalid `delimiter` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test060-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test061",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid doubleQuote",
      "comment": "Metadata generates warning and uses default with invalid `doubleQuote` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test061-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test062",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid encoding",
      "comment": "Metadata generates warning and uses default with invalid `encoding` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test062-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test063",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid header",
      "comment": "Metadata generates warning and uses default with invalid `header` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test063-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test065",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid headerRowCount",
      "comment": "Metadata generates warning and uses default with invalid `headerRowCount` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test065-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test066",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid lineTerminators",
      "comment": "Metadata generates warning and uses default with invalid `lineTerminators` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test066-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test067",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid quoteChar",
      "comment": "Metadata generates warning and uses default with invalid `quoteChar` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test067-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test068",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid skipBlankRows",
      "comment": "Metadata generates warning and uses default with invalid `skipBlankRows` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test068-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test069",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid skipColumns",
      "comment": "Metadata generates warning and uses default with invalid `skipColumns` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test069-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test070",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid skipInitialSpace",
      "comment": "Metadata generates warning and uses default with invalid `skipInitialSpace` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test070-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test071",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid skipRows",
      "comment": "Metadata generates warning and uses default with invalid `skipRows` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test071-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test072",
      "type": "csvt:WarningValidationTest",
      "name": "dialect: invalid trim",
      "comment": "Metadata generates warning and uses default with invalid `trim` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test072-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test073",
      "type": "csvt:WarningValidationTest",
      "name": "invalid @language",
      "comment": "The value of `@language` MUST be a valid `BCP47` language code",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test073-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test074",
      "type": "csvt:NegativeValidationTest",
      "name": "empty tables",
      "comment": "Compliant application must raise an error if this array does not contain one or more `table descriptions`.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test074-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test075",
      "type": "csvt:WarningValidationTest",
      "name": "invalid tableGroup tableDirection",
      "comment": "An atomic property that must have a single string value that is one of \"rtl\", \"ltr\" or \"default\".",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test075-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test076",
      "type": "csvt:WarningValidationTest",
      "name": "invalid table tableDirection",
      "comment": "An atomic property that must have a single string value that is one of \"rtl\", \"ltr\" or \"default\".",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test076-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test077",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid tableGroup @id",
      "comment": "It must not start with `_:.`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test077-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test078",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid table @id",
      "comment": "It must not start with `_:.`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test078-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test079",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid schema @id",
      "comment": "It must not start with `_:.`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test079-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test080",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid column @id",
      "comment": "It must not start with `_:.`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test080-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test081",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid dialect @id",
      "comment": "It must not start with `_:.`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test081-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test082",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid template @id",
      "comment": "It must not start with `_:.`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test082-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test083",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid tableGroup @type",
      "comment": "If included `@type` must be `TableGroup`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test083-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test084",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid table @type",
      "comment": "If included `@type` must be `Table`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test084-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test085",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid schema @type",
      "comment": "If included `@type` must be `Schema`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test085-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test086",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid column @type",
      "comment": "If included `@type` must be `Column`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test086-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test087",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid dialect @type",
      "comment": "If included `@type` must be `Dialect`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test087-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test088",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid template @type",
      "comment": "If included `@type` must be `Template`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test088-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test089",
      "type": "csvt:NegativeValidationTest",
      "name": "missing tables in TableGroup",
      "comment": "The `tables` property is required in a `TableGroup`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test089-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test090",
      "type": "csvt:NegativeValidationTest",
      "name": "missing url in Table",
      "comment": "The `url` property is required in a `Table`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test090-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test091",
      "type": "csvt:NegativeValidationTest",
      "name": "same number of columns in each row",
      "comment": "each `row` MUST contain the same number of cells (although some of these cells may be empty)",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test091.csv",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test092",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid JSON",
      "comment": "All compliant applications MUST generate errors and stop processing if a metadata document does not use valid JSON syntax",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test092-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test093",
      "type": "csvt:WarningValidationTest",
      "name": "undefined properties",
      "comment": "Compliant applications MUST ignore properties (aside from _common properties_) which are not defined in this specification and MUST generate a warning when they are encoutered",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test093-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test094",
      "type": "csvt:NegativeValidationTest",
      "name": "inconsistent array values: tables",
      "comment": "Any items within an array that are not valid objects of the type expected are ignored",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test094-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test095",
      "type": "csvt:WarningValidationTest",
      "name": "inconsistent array values: transformations",
      "comment": "Any items within an array that are not valid objects of the type expected are ignored",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test095-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test096",
      "type": "csvt:NegativeValidationTest",
      "name": "inconsistent array values: columns",
      "comment": "Any items within an array that are not valid objects of the type expected are ignored",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test096-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test097",
      "type": "csvt:WarningValidationTest",
      "name": "inconsistent array values: foreignKeys",
      "comment": "Any items within an array that are not valid objects of the type expected are ignored",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test097-metadata.json",
      "implicit": [
        "countries.csv",
        "country_slice.csv"
      ]
    },
    {
      "id": "manifest-validation#test098",
      "type": "csvt:WarningValidationTest",
      "name": "inconsistent array values: tables",
      "comment": "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test098-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test099",
      "type": "csvt:WarningValidationTest",
      "name": "inconsistent array values: transformations",
      "comment": "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test099-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test100",
      "type": "csvt:NegativeValidationTest",
      "name": "inconsistent array values: columns",
      "comment": "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test100-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test101",
      "type": "csvt:WarningValidationTest",
      "name": "inconsistent array values: foreignKeys",
      "comment": "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test101-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test102",
      "type": "csvt:WarningValidationTest",
      "name": "inconsistent link values: @id",
      "comment": "If the supplied value of a link property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test102-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test103",
      "type": "csvt:NegativeValidationTest",
      "name": "inconsistent link values: url",
      "comment": "If the supplied value of a link property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test103-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test104",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid columnReference",
      "comment": "The referenced description object must have a name property",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test104-metadata.json",
      "implicit": [
        "countries.csv",
        "country_slice.csv"
      ]
    },
    {
      "id": "manifest-validation#test105",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid primaryKey",
      "comment": "The referenced description object must have a name property",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test105-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test106",
      "type": "csvt:WarningValidationTest",
      "name": "invalid dialect",
      "comment": "If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test106-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test107",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid tableSchema",
      "comment": "If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test107-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test108",
      "type": "csvt:NegativeValidationTest",
      "name": "invalid reference",
      "comment": "If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test108-metadata.json",
      "implicit": [
        "countries.csv",
        "country_slice.csv"
      ]
    },
    {
      "id": "manifest-validation#test109",
      "type": "csvt:NegativeValidationTest",
      "name": "titles with invalid language",
      "comment": "Natural Language properties may be objects whose properties MUST be language codes as defined by [BCP47] and whose values are either strings or arrays, providing natural language strings in that language",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test109-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test110",
      "type": "csvt:NegativeValidationTest",
      "name": "titles with non-string values",
      "comment": "Natural Language properties may be objects whose properties MUST be language codes as defined by [BCP47] and whose values are either strings or arrays, providing natural language strings in that language",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test110-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test111",
      "type": "csvt:NegativeValidationTest",
      "name": "titles with invalid value",
      "comment": "If the supplied value of a natural language property is not a string, array or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an empty array",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test111-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test112",
      "type": "csvt:NegativeValidationTest",
      "name": "titles with non-string array values",
      "comment": "If the supplied value is an array, any items in that array that are not strings MUST be ignored",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test112-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test113",
      "type": "csvt:WarningValidationTest",
      "name": "invalid suppressOutput",
      "comment": "Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test113-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test114",
      "type": "csvt:WarningValidationTest",
      "name": "invalid name",
      "comment": "Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test114-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test115",
      "type": "csvt:WarningValidationTest",
      "name": "invalid virtual",
      "comment": "Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test115-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test116",
      "type": "csvt:PositiveValidationTest",
      "name": "file-metadata with query component",
      "comment": "processors MUST attempt to locate a file-specific metadata document. This method MUST NOT be used if the URL of the tabular data file contains a query component.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test116.csv?query",
      "implicit": [
        "test116.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test117",
      "type": "csvt:WarningValidationTest",
      "name": "file-metadata not referencing file",
      "comment": "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it must be ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test117.csv",
      "implicit": [
        "test117.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test118",
      "type": "csvt:PositiveValidationTest",
      "name": "directory-metadata with query component",
      "comment": "processors MUST attempt to locate a directory-level metadata document. This method MUST NOT be used if the URL of the tabular data file contains a query component.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test118/action.csv?query",
      "implicit": [
        "test118/metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test119",
      "type": "csvt:WarningValidationTest",
      "name": "directory-metadata not referencing file",
      "comment": "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it must be ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test119/action.csv",
      "implicit": [
        "test119/metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test120",
      "type": "csvt:WarningValidationTest",
      "name": "link-metadata not referencing file",
      "comment": "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test120.csv",
      "implicit": [
        "test120-linked-metadata.json"
      ],
      "httpLink": "<test120-linked-metadata.json>; rel=\"describedby\""
    },
    {
      "id": "manifest-validation#test121",
      "type": "csvt:PositiveValidationTest",
      "name": "user-metadata not referencing file",
      "comment": "User-specified metadata does not need to reference the starting CSV",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test121-user-metadata.json"
      },
      "action": "test121.csv",
      "implicit": [
        "test121-ref.csv",
        "test121-user-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test122",
      "type": "csvt:PositiveValidationTest",
      "name": "link-metadata not describing file uses file-metadata",
      "comment": "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test122.csv",
      "implicit": [
        "test122-linked-metadata.json",
        "test122.csv-metadata.json"
      ],
      "httpLink": "<test122-linked-metadata.json>; rel=\"describedby\""
    },
    {
      "id": "manifest-validation#test123",
      "type": "csvt:PositiveValidationTest",
      "name": "file-metadata not describing file uses directory-metadata",
      "comment": "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test123/action.csv",
      "implicit": [
        "test123/action.csv-metadata.json",
        "test123/metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test124",
      "type": "csvt:NegativeValidationTest",
      "name": "metadata with columns not matching csv titles",
      "comment": "If not validating, and one schema has a name property but not a titles property, and the other has a titles property but not a name property.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test124-user-metadata.json"
      },
      "action": "tree-ops.csv",
      "implicit": [
        "test124-user-metadata.json"
      ]
    },
    {
      "id": "manifest-validation#test125",
      "type": "csvt:WarningValidationTest",
      "name": "required column with empty cell",
      "comment": "If the column required annotation is true, add an error to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test125-metadata.json",
      "implicit": [
        "test125.csv"
      ]
    },
    {
      "id": "manifest-validation#test126",
      "type": "csvt:WarningValidationTest",
      "name": "required column with cell matching null",
      "comment": "if the string is the same as any one of the values of the column null annotation, then the resulting value is null. If the column separator annotation is null and the column required annotation is true, add an error to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test126-metadata.json",
      "implicit": [
        "test126.csv"
      ]
    },
    {
      "id": "manifest-validation#test127",
      "type": "csvt:NegativeValidationTest",
      "name": "incompatible table",
      "comment": "if TM is not compatible with EM validators must raise an error, other processors must generate a warning and continue processing",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test127-metadata.json",
      "implicit": [
        "test127.csv"
      ]
    },
    {
      "id": "manifest-validation#test128",
      "type": "csvt:NegativeValidationTest",
      "name": "duplicate column names",
      "comment": "The name properties of the column descriptions MUST be unique within a given table description.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test128-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test129",
      "type": "csvt:WarningValidationTest",
      "name": "columnn name as integer",
      "comment": "This (name) MUST be a string and this property has no default value, which means it MUST be ignored if the supplied value is not a string.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test129-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test130",
      "type": "csvt:WarningValidationTest",
      "name": "invalid column name",
      "comment": "column names are restricted as defined in Variables in [URI-TEMPLATE] ",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test130-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test131",
      "type": "csvt:WarningValidationTest",
      "name": "invalid column name",
      "comment": "column names are restricted ... names beginning with '_' are reserved by this specification and MUST NOT be used within metadata documents.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test131-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test132",
      "type": "csvt:PositiveValidationTest",
      "name": "name annotation from title percent encoded",
      "comment": "If there is no name property defined on this column, the first titles value having the same language tag as default language, or und or if no default language is specified, becomes the name annotation for the described column. This annotation MUST be percent-encoded as necessary to conform to the syntactic requirements defined in [RFC3986]",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test132-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test133",
      "type": "csvt:NegativeValidationTest",
      "name": "virtual before non-virtual",
      "comment": "If present, a virtual column MUST appear after all other non-virtual column definitions.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test133-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test134",
      "type": "csvt:NegativeValidationTest",
      "name": "context in common property",
      "comment": "A metadata document MUST NOT add a new context",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test134-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test135",
      "type": "csvt:NegativeValidationTest",
      "name": "@list value",
      "comment": "Values MUST NOT use list objects or set objects.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test135-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test136",
      "type": "csvt:NegativeValidationTest",
      "name": "@set value",
      "comment": "Values MUST NOT use list objects or set objects.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test136-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test137",
      "type": "csvt:NegativeValidationTest",
      "name": "@type out of range (as datatype)",
      "comment": "The value of any @id or @type contained within a metadata document MUST NOT be a blank node.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test137-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test138",
      "type": "csvt:NegativeValidationTest",
      "name": "@type out of range (as node type)",
      "comment": "The value of any @id or @type contained within a metadata document MUST NOT be a blank node.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test138-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test139",
      "type": "csvt:NegativeValidationTest",
      "name": "@type out of range (as node type) - string",
      "comment": "The value of any member of @type MUST be either a term defined in [csvw-context], a prefixed name where the prefix is a term defined in [csvw-context], or an absolute URL.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test139-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test140",
      "type": "csvt:NegativeValidationTest",
      "name": "@type out of range (as node type) - integer",
      "comment": "The value of any member of @type MUST be either a term defined in [csvw-context], a prefixed name where the prefix is a term defined in [csvw-context], or an absolute URL.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test140-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test141",
      "type": "csvt:NegativeValidationTest",
      "name": "@id out of range (as node type) - bnode",
      "comment": "The value of any @id or @type contained within a metadata document MUST NOT be a blank node.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test141-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test142",
      "type": "csvt:NegativeValidationTest",
      "name": "@value with @language and @type",
      "comment": "If a @value property is used on an object, that object MUST NOT have any other properties aside from either @type or @language, and MUST NOT have both @type and @language as properties. The value of the @value property MUST be a string, number, or boolean value.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test142-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test143",
      "type": "csvt:NegativeValidationTest",
      "name": "@value with extra properties",
      "comment": "If a @value property is used on an object, that object MUST NOT have any other properties aside from either @type or @language, and MUST NOT have both @type and @language as properties. The value of the @value property MUST be a string, number, or boolean value.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test143-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test144",
      "type": "csvt:NegativeValidationTest",
      "name": "@language outside of @value",
      "comment": "A @language property MUST NOT be used on an object unless it also has a @value property.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test144-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test145",
      "type": "csvt:NegativeValidationTest",
      "name": "@value with invalid @language",
      "comment": "If a @language property is used, it MUST have a string value that adheres to the syntax defined in [BCP47], or be null.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test145-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test146",
      "type": "csvt:NegativeValidationTest",
      "name": "Invalid faux-keyword",
      "comment": "Aside from @value, @type, @language, and @id, the properties used on an object MUST NOT start with @.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test146-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test147",
      "type": "csvt:NegativeValidationTest",
      "name": "title incompatible with title on case",
      "comment": "If there is a non-empty case-sensitive intersection between the titles values, where matches must have a matching language; und matches any language, and languages match if they are equal when truncated, as defined in [BCP47], to the length of the shortest language tag.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test147-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test148",
      "type": "csvt:NegativeValidationTest",
      "name": "title incompatible with title on language",
      "comment": "If there is a non-empty case-sensitive intersection between the titles values, where matches must have a matching language; und matches any language, and languages match if they are equal when truncated, as defined in [BCP47], to the length of the shortest language tag.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test148-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test149",
      "type": "csvt:PositiveValidationTest",
      "name": "title compatible with title on less specific language",
      "comment": "If there is a non-empty case-sensitive intersection between the titles values, where matches must have a matching language; und matches any language, and languages match if they are equal when truncated, as defined in [BCP47], to the length of the shortest language tag.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test149-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test150",
      "type": "csvt:NegativeValidationTest",
      "name": "non-builtin datatype (datatype value)",
      "comment": "If the value of this property is a string, it must be one of the built-in datatypes defined in section 5.11.1 Built-in Datatypes or an absolute URL",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test150-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test151",
      "type": "csvt:NegativeValidationTest",
      "name": "non-builtin datatype (base value)",
      "comment": "If the value of this property is a string, it MUST be one of the built-in datatypes",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test151-metadata.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-validation#test152",
      "type": "csvt:PositiveValidationTest",
      "name": "string format (valid combinations)",
      "comment": "If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test152-metadata.json",
      "implicit": [
        "test152.csv"
      ]
    },
    {
      "id": "manifest-validation#test153",
      "type": "csvt:NegativeValidationTest",
      "name": "string format (bad format string)",
      "comment": "If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test153-metadata.json",
      "implicit": [
        "test153.csv"
      ]
    },
    {
      "id": "manifest-validation#test154",
      "type": "csvt:WarningValidationTest",
      "name": "string format (value not matching format)",
      "comment": "If the datatype base is not numeric, boolean, a date/time type, or a duration type, the datatype format annotation provides a regular expression for the string values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test154-metadata.json",
      "implicit": [
        "test154.csv"
      ]
    },
    {
      "id": "manifest-validation#test155",
      "type": "csvt:PositiveValidationTest",
      "name": "number format (valid combinations)",
      "comment": "If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test155-metadata.json",
      "implicit": [
        "test155.csv"
      ]
    },
    {
      "id": "manifest-validation#test156",
      "type": "csvt:NegativeValidationTest",
      "name": "number format (bad format string)",
      "comment": "If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test156-metadata.json",
      "implicit": [
        "test156.csv"
      ]
    },
    {
      "id": "manifest-validation#test157",
      "type": "csvt:WarningValidationTest",
      "name": "number format (value not matching format)",
      "comment": "If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test157-metadata.json",
      "implicit": [
        "test157.csv"
      ]
    },
    {
      "id": "manifest-validation#test158",
      "type": "csvt:PositiveValidationTest",
      "name": "number format (valid combinations)",
      "comment": "Numeric dataype with object format",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test158-metadata.json",
      "implicit": [
        "test158.csv"
      ]
    },
    {
      "id": "manifest-validation#test159",
      "type": "csvt:NegativeValidationTest",
      "name": "number format (bad pattern format string)",
      "comment": "If the datatype format annotation is a single string, this is interpreted in the same way as if it were an object with a pattern property whose value is that string",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test159-metadata.json",
      "implicit": [
        "test159.csv"
      ]
    },
    {
      "id": "manifest-validation#test160",
      "type": "csvt:WarningValidationTest",
      "name": "number format (not matching values with pattern)",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test160-metadata.json",
      "implicit": [
        "test160.csv"
      ]
    },
    {
      "id": "manifest-validation#test161",
      "type": "csvt:WarningValidationTest",
      "name": "number format (not matching values without pattern)",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test161-metadata.json",
      "implicit": [
        "test161.csv"
      ]
    },
    {
      "id": "manifest-validation#test162",
      "type": "csvt:WarningValidationTest",
      "name": "numeric format (consecutive groupChar)",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed contains two consecutive groupChar strings",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test162-metadata.json",
      "implicit": [
        "test162.csv"
      ]
    },
    {
      "id": "manifest-validation#test163",
      "type": "csvt:WarningValidationTest",
      "name": "integer datatype with decimalChar",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed contains the decimalChar, if the datatype base is integer or one of its sub-values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test163-metadata.json",
      "implicit": [
        "test163.csv"
      ]
    },
    {
      "id": "manifest-validation#test164",
      "type": "csvt:WarningValidationTest",
      "name": "decimal datatype with exponent",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, if the datatype base is decimal or one of its sub-values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test164-metadata.json",
      "implicit": [
        "test164.csv"
      ]
    },
    {
      "id": "manifest-validation#test165",
      "type": "csvt:WarningValidationTest",
      "name": "decimal type with NaN",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, is one of the special values NaN, INF, or -INF, if the datatype base is decimal or one of its sub-values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test165-metadata.json",
      "implicit": [
        "test165.csv"
      ]
    },
    {
      "id": "manifest-validation#test166",
      "type": "csvt:WarningValidationTest",
      "name": "decimal type with INF",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, is one of the special values NaN, INF, or -INF, if the datatype base is decimal or one of its sub-values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test166-metadata.json",
      "implicit": [
        "test166.csv"
      ]
    },
    {
      "id": "manifest-validation#test167",
      "type": "csvt:WarningValidationTest",
      "name": "decimal type with -INF",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, is one of the special values NaN, INF, or -INF, if the datatype base is decimal or one of its sub-values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test167-metadata.json",
      "implicit": [
        "test167.csv"
      ]
    },
    {
      "id": "manifest-validation#test168",
      "type": "csvt:PositiveValidationTest",
      "name": "decimal with implicit groupChar",
      "comment": "When parsing the string value of a cell against this format specification, implementations MUST recognise and parse numbers",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test168-metadata.json",
      "implicit": [
        "test168.csv"
      ]
    },
    {
      "id": "manifest-validation#test169",
      "type": "csvt:WarningValidationTest",
      "name": "invalid decimal",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test169-metadata.json",
      "implicit": [
        "test169.csv"
      ]
    },
    {
      "id": "manifest-validation#test170",
      "type": "csvt:PositiveValidationTest",
      "name": "decimal with percent",
      "comment": "Implementations MUST use the sign, exponent, percent, and per-mille signs when parsing the string value of a cell to provide the value of the cell",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test170-metadata.json",
      "implicit": [
        "test170.csv"
      ]
    },
    {
      "id": "manifest-validation#test171",
      "type": "csvt:PositiveValidationTest",
      "name": "decimal with per-mille",
      "comment": "Implementations MUST use the sign, exponent, percent, and per-mille signs when parsing the string value of a cell to provide the value of the cell",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test171-metadata.json",
      "implicit": [
        "test171.csv"
      ]
    },
    {
      "id": "manifest-validation#test172",
      "type": "csvt:WarningValidationTest",
      "name": "invalid byte",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test172-metadata.json",
      "implicit": [
        "test172.csv"
      ]
    },
    {
      "id": "manifest-validation#test173",
      "type": "csvt:WarningValidationTest",
      "name": "invald unsignedLong",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test173-metadata.json",
      "implicit": [
        "test173.csv"
      ]
    },
    {
      "id": "manifest-validation#test174",
      "type": "csvt:WarningValidationTest",
      "name": "invalid unsignedShort",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test174-metadata.json",
      "implicit": [
        "test174.csv"
      ]
    },
    {
      "id": "manifest-validation#test175",
      "type": "csvt:WarningValidationTest",
      "name": "invalid unsignedByte",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test175-metadata.json",
      "implicit": [
        "test175.csv"
      ]
    },
    {
      "id": "manifest-validation#test176",
      "type": "csvt:WarningValidationTest",
      "name": "invalid positiveInteger",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test176-metadata.json",
      "implicit": [
        "test176.csv"
      ]
    },
    {
      "id": "manifest-validation#test177",
      "type": "csvt:WarningValidationTest",
      "name": "invalid negativeInteger",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test177-metadata.json",
      "implicit": [
        "test177.csv"
      ]
    },
    {
      "id": "manifest-validation#test178",
      "type": "csvt:WarningValidationTest",
      "name": "invalid nonPositiveInteger",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test178-metadata.json",
      "implicit": [
        "test178.csv"
      ]
    },
    {
      "id": "manifest-validation#test179",
      "type": "csvt:WarningValidationTest",
      "name": "invalid nonNegativeInteger",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test179-metadata.json",
      "implicit": [
        "test179.csv"
      ]
    },
    {
      "id": "manifest-validation#test180",
      "type": "csvt:WarningValidationTest",
      "name": "invalid double",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test180-metadata.json",
      "implicit": [
        "test180.csv"
      ]
    },
    {
      "id": "manifest-validation#test181",
      "type": "csvt:WarningValidationTest",
      "name": "invalid number",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test181-metadata.json",
      "implicit": [
        "test181.csv"
      ]
    },
    {
      "id": "manifest-validation#test182",
      "type": "csvt:WarningValidationTest",
      "name": "invalid float",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell contains an exponent, does not meet the numeric format defined above",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test182-metadata.json",
      "implicit": [
        "test182.csv"
      ]
    },
    {
      "id": "manifest-validation#test183",
      "type": "csvt:PositiveValidationTest",
      "name": "boolean format (valid combinations)",
      "comment": "If the datatype base for a cell is boolean, the datatype format annotation provides the true and false values expected, separated by `|`.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test183-metadata.json",
      "implicit": [
        "test183.csv"
      ]
    },
    {
      "id": "manifest-validation#test184",
      "type": "csvt:NegativeValidationTest",
      "name": "boolean format (bad format string)",
      "comment": "If the datatype base for a cell is boolean, the datatype format annotation provides the true and false values expected, separated by `|`.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test184-metadata.json",
      "implicit": [
        "test184.csv"
      ]
    },
    {
      "id": "manifest-validation#test185",
      "type": "csvt:WarningValidationTest",
      "name": "boolean format (value not matching format)",
      "comment": "If the datatype base for a cell is boolean, the datatype format annotation provides the true and false values expected, separated by `|`.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test185-metadata.json",
      "implicit": [
        "test185.csv"
      ]
    },
    {
      "id": "manifest-validation#test186",
      "type": "csvt:WarningValidationTest",
      "name": "boolean format (not matching datatype)",
      "comment": "Implementations MUST add a validation error to the errors annotation for the cell if the string being parsed",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test186-metadata.json",
      "implicit": [
        "test186.csv"
      ]
    },
    {
      "id": "manifest-validation#test187",
      "type": "csvt:PositiveValidationTest",
      "name": "date format (valid native combinations)",
      "comment": "The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test187-metadata.json",
      "implicit": [
        "test187.csv"
      ]
    },
    {
      "id": "manifest-validation#test188",
      "type": "csvt:PositiveValidationTest",
      "name": "date format (valid date combinations with formats)",
      "comment": "The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test188-metadata.json",
      "implicit": [
        "test188.csv"
      ]
    },
    {
      "id": "manifest-validation#test189",
      "type": "csvt:PositiveValidationTest",
      "name": "date format (valid time combinations with formats)",
      "comment": "The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test189-metadata.json",
      "implicit": [
        "test189.csv"
      ]
    },
    {
      "id": "manifest-validation#test190",
      "type": "csvt:PositiveValidationTest",
      "name": "date format (valid dateTime combinations with formats)",
      "comment": "The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test190-metadata.json",
      "implicit": [
        "test190.csv"
      ]
    },
    {
      "id": "manifest-validation#test191",
      "type": "csvt:NegativeValidationTest",
      "name": "date format (bad format string)",
      "comment": "The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test191-metadata.json",
      "implicit": [
        "test191.csv"
      ]
    },
    {
      "id": "manifest-validation#test192",
      "type": "csvt:WarningValidationTest",
      "name": "date format (value not matching format)",
      "comment": "The supported date and time formats listed here are expressed in terms of the date field symbols defined in [UAX35] and MUST be interpreted by implementations as defined in that specification.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test192-metadata.json",
      "implicit": [
        "test192.csv"
      ]
    },
    {
      "id": "manifest-validation#test193",
      "type": "csvt:PositiveValidationTest",
      "name": "duration format (valid combinations)",
      "comment": "If the datatype base is a duration type, the datatype format annotation provides a regular expression for the string values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test193-metadata.json",
      "implicit": [
        "test193.csv"
      ]
    },
    {
      "id": "manifest-validation#test194",
      "type": "csvt:WarningValidationTest",
      "name": "duration format (value not matching format)",
      "comment": "If the datatype base is a duration type, the datatype format annotation provides a regular expression for the string values",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test194-metadata.json",
      "implicit": [
        "test194.csv"
      ]
    },
    {
      "id": "manifest-validation#test195",
      "type": "csvt:PositiveValidationTest",
      "name": "values with matching length",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test195-metadata.json",
      "implicit": [
        "test195.csv"
      ]
    },
    {
      "id": "manifest-validation#test196",
      "type": "csvt:WarningValidationTest",
      "name": "values with wrong length",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test196-metadata.json",
      "implicit": [
        "test196.csv"
      ]
    },
    {
      "id": "manifest-validation#test197",
      "type": "csvt:WarningValidationTest",
      "name": "values with wrong maxLength",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test197-metadata.json",
      "implicit": [
        "test197.csv"
      ]
    },
    {
      "id": "manifest-validation#test198",
      "type": "csvt:WarningValidationTest",
      "name": "values with wrong minLength",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test198-metadata.json",
      "implicit": [
        "test198.csv"
      ]
    },
    {
      "id": "manifest-validation#test199",
      "type": "csvt:NegativeValidationTest",
      "name": "length != minLength",
      "comment": "Applications MUST raise an error if both length and minLength are specified and they do not have the same value. ",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test199-metadata.json",
      "implicit": [
        "test199.csv"
      ]
    },
    {
      "id": "manifest-validation#test200",
      "type": "csvt:NegativeValidationTest",
      "name": "length != maxLength",
      "comment": "Applications MUST raise an error if both length and maxLength are specified and they do not have the same value. ",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test200-metadata.json",
      "implicit": [
        "test200.csv"
      ]
    },
    {
      "id": "manifest-validation#test201",
      "type": "csvt:NegativeValidationTest",
      "name": "length on date",
      "comment": "Applications MUST raise an error if length, maxLength, or minLength are specified and the base datatype is not string or one of its subtypes, or a binary type.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test201-metadata.json",
      "implicit": [
        "test201.csv"
      ]
    },
    {
      "id": "manifest-validation#test202",
      "type": "csvt:PositiveValidationTest",
      "name": "float matching constraints",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test202-metadata.json",
      "implicit": [
        "test202.csv"
      ]
    },
    {
      "id": "manifest-validation#test203",
      "type": "csvt:WarningValidationTest",
      "name": "float value constraint not matching minimum",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test203-metadata.json",
      "implicit": [
        "test203.csv"
      ]
    },
    {
      "id": "manifest-validation#test204",
      "type": "csvt:WarningValidationTest",
      "name": "float value constraint not matching maximum",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test204-metadata.json",
      "implicit": [
        "test204.csv"
      ]
    },
    {
      "id": "manifest-validation#test205",
      "type": "csvt:WarningValidationTest",
      "name": "float value constraint not matching minInclusive",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test205-metadata.json",
      "implicit": [
        "test205.csv"
      ]
    },
    {
      "id": "manifest-validation#test206",
      "type": "csvt:WarningValidationTest",
      "name": "float value constraint not matching minExclusive",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test206-metadata.json",
      "implicit": [
        "test206.csv"
      ]
    },
    {
      "id": "manifest-validation#test207",
      "type": "csvt:WarningValidationTest",
      "name": "float value constraint not matching maxInclusive",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test207-metadata.json",
      "implicit": [
        "test207.csv"
      ]
    },
    {
      "id": "manifest-validation#test208",
      "type": "csvt:WarningValidationTest",
      "name": "float value constraint not matching maxExclusive",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test208-metadata.json",
      "implicit": [
        "test208.csv"
      ]
    },
    {
      "id": "manifest-validation#test209",
      "type": "csvt:PositiveValidationTest",
      "name": "date matching constraints",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test209-metadata.json",
      "implicit": [
        "test209.csv"
      ]
    },
    {
      "id": "manifest-validation#test210",
      "type": "csvt:WarningValidationTest",
      "name": "date value constraint not matching minimum",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test210-metadata.json",
      "implicit": [
        "test210.csv"
      ]
    },
    {
      "id": "manifest-validation#test211",
      "type": "csvt:WarningValidationTest",
      "name": "date value constraint not matching maximum",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test211-metadata.json",
      "implicit": [
        "test211.csv"
      ]
    },
    {
      "id": "manifest-validation#test212",
      "type": "csvt:WarningValidationTest",
      "name": "date value constraint not matching minInclusive",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test212-metadata.json",
      "implicit": [
        "test212.csv"
      ]
    },
    {
      "id": "manifest-validation#test213",
      "type": "csvt:WarningValidationTest",
      "name": "date value constraint not matching minExclusive",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test213-metadata.json",
      "implicit": [
        "test213.csv"
      ]
    },
    {
      "id": "manifest-validation#test214",
      "type": "csvt:WarningValidationTest",
      "name": "date value constraint not matching maxInclusive",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test214-metadata.json",
      "implicit": [
        "test214.csv"
      ]
    },
    {
      "id": "manifest-validation#test215",
      "type": "csvt:WarningValidationTest",
      "name": "date value constraint not matching maxExclusive",
      "comment": "validate the value based on the length constraints described in section 4.6.1 Length Constraints, the value constraints described in section 4.6.2 Value Constraints and the datatype format annotation if one is specified, as described below. If there are any errors, add them to the list of errors for the cell.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test215-metadata.json",
      "implicit": [
        "test215.csv"
      ]
    },
    {
      "id": "manifest-validation#test216",
      "type": "csvt:NegativeValidationTest",
      "name": "minInclusive and minExclusive",
      "comment": "Applications MUST raise an error if both minInclusive and minExclusive are specified, or if both maxInclusive and maxExclusive are specified. ",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test216-metadata.json",
      "implicit": [
        "test216.csv"
      ]
    },
    {
      "id": "manifest-validation#test217",
      "type": "csvt:NegativeValidationTest",
      "name": "maxInclusive and maxExclusive",
      "comment": "Applications MUST raise an error if both minInclusive and minExclusive are specified, or if both maxInclusive and maxExclusive are specified. ",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test217-metadata.json",
      "implicit": [
        "test217.csv"
      ]
    },
    {
      "id": "manifest-validation#test218",
      "type": "csvt:NegativeValidationTest",
      "name": "maxInclusive < minInclusive",
      "comment": "Applications MUST raise an error if both minInclusive and maxInclusive are specified and maxInclusive is less than minInclusive, or if both minInclusive and maxExclusive are specified and maxExclusive is less than or equal to minInclusive.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test218-metadata.json",
      "implicit": [
        "test218.csv"
      ]
    },
    {
      "id": "manifest-validation#test219",
      "type": "csvt:NegativeValidationTest",
      "name": "maxExclusive = minInclusive",
      "comment": "Applications MUST raise an error if both minInclusive and maxInclusive are specified and maxInclusive is less than minInclusive, or if both minInclusive and maxExclusive are specified and maxExclusive is less than or equal to minInclusive.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test219-metadata.json",
      "implicit": [
        "test219.csv"
      ]
    },
    {
      "id": "manifest-validation#test220",
      "type": "csvt:NegativeValidationTest",
      "name": "maxExclusive < minExclusive",
      "comment": "Applications MUST raise an error if both minExclusive and maxExclusive are specified and maxExclusive is less than minExclusive, or if both minExclusive and maxInclusive are specified and maxInclusive is less than or equal to minExclusive.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test220-metadata.json",
      "implicit": [
        "test220.csv"
      ]
    },
    {
      "id": "manifest-validation#test221",
      "type": "csvt:NegativeValidationTest",
      "name": "maxInclusive = minExclusive",
      "comment": "Applications MUST raise an error if both minExclusive and maxExclusive are specified and maxExclusive is less than minExclusive, or if both minExclusive and maxInclusive are specified and maxInclusive is less than or equal to minExclusive.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test221-metadata.json",
      "implicit": [
        "test221.csv"
      ]
    },
    {
      "id": "manifest-validation#test222",
      "type": "csvt:NegativeValidationTest",
      "name": "string datatype with minimum",
      "comment": "Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test222-metadata.json",
      "implicit": [
        "test222.csv"
      ]
    },
    {
      "id": "manifest-validation#test223",
      "type": "csvt:NegativeValidationTest",
      "name": "string datatype with maxium",
      "comment": "Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test223-metadata.json",
      "implicit": [
        "test223.csv"
      ]
    },
    {
      "id": "manifest-validation#test224",
      "type": "csvt:NegativeValidationTest",
      "name": "string datatype with minInclusive",
      "comment": "Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test224-metadata.json",
      "implicit": [
        "test224.csv"
      ]
    },
    {
      "id": "manifest-validation#test225",
      "type": "csvt:NegativeValidationTest",
      "name": "string datatype with maxInclusive",
      "comment": "Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test225-metadata.json",
      "implicit": [
        "test225.csv"
      ]
    },
    {
      "id": "manifest-validation#test226",
      "type": "csvt:NegativeValidationTest",
      "name": "string datatype with minExclusive",
      "comment": "Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test226-metadata.json",
      "implicit": [
        "test226.csv"
      ]
    },
    {
      "id": "manifest-validation#test227",
      "type": "csvt:NegativeValidationTest",
      "name": "string datatype with maxExclusive",
      "comment": "Applications MUST raise an error if minimum, minInclusive, maximum, maxInclusive, minExclusive, or maxExclusive are specified and the base datatype is not a numeric, date/time, or duration type.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test227-metadata.json",
      "implicit": [
        "test227.csv"
      ]
    },
    {
      "id": "manifest-validation#test228",
      "type": "csvt:PositiveValidationTest",
      "name": "length with separator",
      "comment": "If the value is a list, the constraint applies to each element of the list.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test228-metadata.json",
      "implicit": [
        "test228.csv"
      ]
    },
    {
      "id": "manifest-validation#test229",
      "type": "csvt:PositiveValidationTest",
      "name": "matching minLength with separator",
      "comment": "If the value is a list, the constraint applies to each element of the list.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test229-metadata.json",
      "implicit": [
        "test229.csv"
      ]
    },
    {
      "id": "manifest-validation#test230",
      "type": "csvt:WarningValidationTest",
      "name": "failing minLength with separator",
      "comment": "If the value is a list, the constraint applies to each element of the list.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test230-metadata.json",
      "implicit": [
        "test230.csv"
      ]
    }
  ]
}
