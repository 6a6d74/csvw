{
  "@context": {
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "mf": "http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#",
    "mq": "http://www.w3.org/2001/sw/DataAccess/tests/test-query#",
    "csvt": "http://w3c.github.io/csvw/test-vocab#",
    "id": "@id",
    "type": "@type",
    "action": {
      "@id": "mf:action",
      "@type": "@id"
    },
    "approval": {
      "@id": "csvt:approval",
      "@type": "@id"
    },
    "comment": "rdfs:comment",
    "contentType": "csvt:contentType",
    "entries": {
      "@id": "mf:entries",
      "@type": "@id",
      "@container": "@list"
    },
    "httpLink": "csvt:httpLink",
    "implicit": {
      "@id": "mf:implicit",
      "@type": "@id",
      "@container": "@set"
    },
    "label": "rdfs:label",
    "metadata": {
      "@id": "csvt:metadata",
      "@type": "@id"
    },
    "minimal": "csvt:minimal",
    "name": "mf:name",
    "noProv": "csvt:noProv",
    "option": "csvt:option",
    "result": {
      "@id": "mf:result",
      "@type": "@id"
    }
  },
  "id": "manifest-json",
  "type": "mf:Manifest",
  "label": "CSVW JSON tests",
  "comment": "Tests transformation of CSV to JSON.",
  "entries": [
    {
      "id": "manifest-json#test001",
      "type": "csvt:ToJsonTest",
      "name": "Simple table",
      "comment": "The simplest possible table without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test001.csv",
      "result": "test001.json"
    },
    {
      "id": "manifest-json#test002",
      "type": "csvt:ToJsonTest",
      "name": "Quoted field",
      "comment": "Table with one quoted field without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test002.csv",
      "result": "test002.json"
    },
    {
      "id": "manifest-json#test003",
      "type": "csvt:ToJsonTest",
      "name": "Surrounding spaces",
      "comment": "Table with whitespace before and after every field without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test003.csv",
      "result": "test003.json"
    },
    {
      "id": "manifest-json#test005",
      "type": "csvt:ToJsonTest",
      "name": "Identifier references",
      "comment": "A table with entity identifiers and references to other entities without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test005.csv",
      "result": "test005.json"
    },
    {
      "id": "manifest-json#test006",
      "type": "csvt:ToJsonTest",
      "name": "No identifiers",
      "comment": "Records contain two entities with relationships which are duplicated without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test006.csv",
      "result": "test006.json"
    },
    {
      "id": "manifest-json#test007",
      "type": "csvt:ToJsonTest",
      "name": "Joined table with unique identifiers",
      "comment": "Joined data with identified records without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test007.csv",
      "result": "test007.json"
    },
    {
      "id": "manifest-json#test008",
      "type": "csvt:ToJsonTest",
      "name": "Microsyntax - internal field separator",
      "comment": "One field has comma-separated values without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test008.csv",
      "result": "test008.json"
    },
    {
      "id": "manifest-json#test009",
      "type": "csvt:ToJsonTest",
      "name": "Microsyntax - formatted time",
      "comment": "Field with parseable human formatted time without metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test009.csv",
      "result": "test009.json"
    },
    {
      "id": "manifest-json#test010",
      "type": "csvt:ToJsonTest",
      "name": "Country-codes-and-names example",
      "comment": "Country-codes-and-names example",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test010.csv",
      "result": "test010.json"
    },
    {
      "id": "manifest-json#test011",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops example with metadata",
      "comment": "tree-ops example with metadata. Processors should load metadata based on action URL.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test011/tree-ops.csv",
      "result": "test011/result.json",
      "implicit": [
        "test011/tree-ops.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test012",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops example with directory metadata",
      "comment": "tree-ops example with directory metadata. Processors should find directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test012/tree-ops.csv",
      "result": "test012/result.json",
      "implicit": [
        "test012/metadata.json"
      ]
    },
    {
      "id": "manifest-json#test013",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops example from user metadata",
      "comment": "tree-ops example from user metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test013-user-metadata.json"
      },
      "action": "tree-ops.csv",
      "result": "test013.json",
      "implicit": [
        "test013-user-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test014",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops example with linked metadata",
      "comment": "tree-ops example with linked metadata. Processors load metadata from link header.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test014/tree-ops.csv",
      "result": "test014/result.json",
      "implicit": [
        "test014/linked-metadata.json"
      ],
      "httpLink": "<linked-metadata.json>; rel=\"describedby\""
    },
    {
      "id": "manifest-json#test015",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops example with user and directory metadata",
      "comment": "tree-ops example with user and directory metadata. Processors should find directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test015/user-metadata.json"
      },
      "action": "test015/tree-ops.csv",
      "result": "test015/result.json",
      "implicit": [
        "test015/user-metadata.json",
        "test015/metadata.json"
      ]
    },
    {
      "id": "manifest-json#test016",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops example with linked and directory metadata",
      "comment": "tree-ops example with linked and directory metadata. Processors should find link- and directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test016/tree-ops.csv",
      "result": "test016/result.json",
      "implicit": [
        "test016/linked-metadata.json",
        "test016/metadata.json"
      ],
      "httpLink": "<linked-metadata.json>; rel=\"describedby\""
    },
    {
      "id": "manifest-json#test017",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops example with file and directory metadata",
      "comment": "tree-ops example with file and directory metadata. Processors should find file- and directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test017/tree-ops.csv",
      "result": "test017/result.json",
      "implicit": [
        "test017/tree-ops.csv-metadata.json",
        "test017/metadata.json"
      ]
    },
    {
      "id": "manifest-json#test018",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops example with user, file and directory metadata",
      "comment": "tree-ops example with user, file and directory metadata. Processors should find user-, file- and directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test018/user-metadata.json"
      },
      "action": "test018/tree-ops.csv",
      "result": "test018/result.json",
      "implicit": [
        "test018/user-metadata.json",
        "test018/tree-ops.csv-metadata.json",
        "test018/metadata.json"
      ]
    },
    {
      "id": "manifest-json#test019",
      "type": "csvt:ToJsonTest",
      "name": "no header",
      "comment": "If a CSV+ file does not include a header line, this MUST be specified using the `header` parameter.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "tree-ops.csv",
      "result": "test019.json",
      "contentType": "text/csv;header=absent"
    },
    {
      "id": "manifest-json#test020",
      "type": "csvt:ToJsonTest",
      "name": "dialect: trim=start",
      "comment": "If `trim` is `true` or \"start\" then whitespace from the start of values that are not enclosed MUST be removed from the value.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test020-metadata.json",
      "result": "test020.json",
      "implicit": [
        "test020.csv"
      ]
    },
    {
      "id": "manifest-json#test021",
      "type": "csvt:ToJsonTest",
      "name": "dialect: trim=end",
      "comment": "If `trim` is `true` or \"end\" then whitespace from the end of values that are not enclosed MUST be removed from the value.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test021-metadata.json",
      "result": "test021.json",
      "implicit": [
        "test021.csv"
      ]
    },
    {
      "id": "manifest-json#test022",
      "type": "csvt:ToJsonTest",
      "name": "dialect: trim=true",
      "comment": "If `trim` is `true` or \"start\" then whitespace from the start of values that are not enclosed MUST be removed from the value. If `trim` is `true` or \"end\" then whitespace from the end of values that are not enclosed MUST be removed from the value.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test022-metadata.json",
      "result": "test022.json",
      "implicit": [
        "test022.csv"
      ]
    },
    {
      "id": "manifest-json#test023",
      "type": "csvt:ToJsonTest",
      "name": "dialect: header=false",
      "comment": "If `true`, sets the `header row count` flag to 1, and if `false` to 0, unless `headerRowCount` is provided, in which case the value provided for the `header` property is ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test023-user-metadata.json"
      },
      "action": "tree-ops.csv",
      "result": "test023.json",
      "implicit": [
        "test023-user-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test024",
      "type": "csvt:ToJsonTest",
      "name": "dialect: header=false and headerRowCount=1",
      "comment": "If `true`, sets the `header row count` flag to 1, and if `false` to 0, unless `headerRowCount` is provided, in which case the value provided for the `header` property is ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test024-user-metadata.json"
      },
      "action": "tree-ops.csv",
      "result": "test024.json",
      "implicit": [
        "test024-user-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test025",
      "type": "csvt:ToJsonTest",
      "name": "dialect: header=false and skipRows=1",
      "comment": "Ignore header uses column definitions from metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test025-user-metadata.json"
      },
      "action": "tree-ops.csv",
      "result": "test025.json",
      "implicit": [
        "test025-user-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test026",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops example with directory metadata",
      "comment": "tree-ops example with directory metadata. Processors should find directory-based metadata.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test026/metadata.json",
      "result": "test026/result.json",
      "implicit": [
        "test026/tree-ops.csv",
        "test026/metadata.json"
      ]
    },
    {
      "id": "manifest-json#test027",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops minimal output",
      "comment": "tree-ops example with metadata. Minimal output mode",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "metadata": "test027-user-metadata.json",
        "minimal": true
      },
      "action": "tree-ops.csv",
      "result": "test027.json",
      "implicit": [
        "test027-user-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test028",
      "type": "csvt:ToJsonTest",
      "name": "countries.csv example",
      "comment": "countries.csv example with no metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "countries.csv",
      "result": "test028.json"
    },
    {
      "id": "manifest-json#test029",
      "type": "csvt:ToJsonTest",
      "name": "countries.csv minimal",
      "comment": "countries.csv example with no metadata and minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "countries.csv",
      "result": "test029.json"
    },
    {
      "id": "manifest-json#test030",
      "type": "csvt:ToJsonTest",
      "name": "countries.json example",
      "comment": "countries.json from metadata",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "countries.json",
      "result": "test030.json",
      "implicit": [
        "countries.csv",
        "country_slice.csv"
      ]
    },
    {
      "id": "manifest-json#test031",
      "type": "csvt:ToJsonTest",
      "name": "countries.json example minimal output",
      "comment": "countries.json from metadata minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "countries.json",
      "result": "test031.json",
      "implicit": [
        "countries.csv",
        "country_slice.csv"
      ]
    },
    {
      "id": "manifest-json#test032",
      "type": "csvt:ToJsonTest",
      "name": "events-listing.csv example",
      "comment": "events-listing example with file metadata, virtual columns and multiple subjects per row",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test032/metadata.json",
      "result": "test032/result.json",
      "implicit": [
        "test032/events-listing.csv",
        "test032/metadata.json-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test033",
      "type": "csvt:ToJsonTest",
      "name": "events-listing.csv minimal output",
      "comment": "events-listing example with file metadata, virtual columns and multiple subjects per row; minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "test033/metadata.json",
      "result": "test033/result.json",
      "implicit": [
        "test033/events-listing.csv",
        "test033/metadata.json-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test034",
      "type": "csvt:ToJsonTest",
      "name": "roles example",
      "comment": "Public Sector Roles example with referenced schemas",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test034/metadata.json",
      "result": "test034/result.json",
      "implicit": [
        "test034/senior-roles.csv",
        "test034/junior-roles.csv",
        "test034/gov.uk/data/organizations.csv",
        "test034/gov.uk/data/professions.csv",
        "test034/gov.uk/schema/junior-roles.json",
        "test034/gov.uk/schema/senior-roles.json",
        "test034/gov.uk/schema/organizations.json",
        "test034/gov.uk/schema/professions.json"
      ]
    },
    {
      "id": "manifest-json#test035",
      "type": "csvt:ToJsonTest",
      "name": "roles minimal",
      "comment": "Public Sector Roles example with referenced schemas; minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "test035/metadata.json",
      "result": "test035/result.json",
      "implicit": [
        "test035/senior-roles.csv",
        "test035/junior-roles.csv",
        "test035/gov.uk/data/organizations.csv",
        "test035/gov.uk/data/professions.csv",
        "test035/gov.uk/schema/junior-roles.json",
        "test035/gov.uk/schema/senior-roles.json",
        "test035/gov.uk/schema/organizations.json",
        "test035/gov.uk/schema/professions.json"
      ]
    },
    {
      "id": "manifest-json#test036",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops-ext example",
      "comment": "tree-ops extended example",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test036/tree-ops-ext.csv",
      "result": "test036/result.json",
      "implicit": [
        "test036/tree-ops-ext.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test037",
      "type": "csvt:ToJsonTest",
      "name": "tree-ops-ext minimal",
      "comment": "tree-ops extended example; minimal output",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true,
        "minimal": true
      },
      "action": "test037/tree-ops-ext.csv",
      "result": "test037/result.json",
      "implicit": [
        "test037/tree-ops-ext.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test038",
      "type": "csvt:ToJsonTest",
      "name": "inherited properties propagation",
      "comment": "Setting inherited properties at different levels inherit to cell",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test038-metadata.json",
      "result": "test038.json",
      "implicit": [
        "test038.csv"
      ]
    },
    {
      "id": "manifest-json#test039",
      "type": "csvt:ToJsonTest",
      "name": "valid inherited properties",
      "comment": "Different combinations of valid inherited properties",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test039-metadata.json",
      "result": "test039.json",
      "implicit": [
        "test039.csv"
      ]
    },
    {
      "id": "manifest-json#test040",
      "type": "csvt:ToJsonTest",
      "name": "invalid null",
      "comment": "Metadata generates warning and uses default with invalid `null` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test040-metadata.json",
      "result": "test040.json",
      "implicit": [
        "test040.csv"
      ]
    },
    {
      "id": "manifest-json#test041",
      "type": "csvt:ToJsonTest",
      "name": "invalid lang",
      "comment": "Metadata generates warning and uses default with invalid `lang` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test041-metadata.json",
      "result": "test041.json",
      "implicit": [
        "test041.csv"
      ]
    },
    {
      "id": "manifest-json#test042",
      "type": "csvt:ToJsonTest",
      "name": "invalid textDirection",
      "comment": "Metadata generates warning and uses default with invalid `textDirection`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test042-metadata.json",
      "result": "test042.json",
      "implicit": [
        "test042.csv"
      ]
    },
    {
      "id": "manifest-json#test043",
      "type": "csvt:ToJsonTest",
      "name": "invalid separator",
      "comment": "Metadata generates warning and uses default with invalid `separator`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test043-metadata.json",
      "result": "test043.json",
      "implicit": [
        "test043.csv"
      ]
    },
    {
      "id": "manifest-json#test044",
      "type": "csvt:ToJsonTest",
      "name": "invalid ordered",
      "comment": "Metadata generates warning and uses default with invalid `ordered`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test044-metadata.json",
      "result": "test044.json",
      "implicit": [
        "test044.csv"
      ]
    },
    {
      "id": "manifest-json#test045",
      "type": "csvt:ToJsonTest",
      "name": "invalid default",
      "comment": "Metadata generates warning and uses default with invalid `default`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test045-metadata.json",
      "result": "test045.json",
      "implicit": [
        "test045.csv"
      ]
    },
    {
      "id": "manifest-json#test046",
      "type": "csvt:ToJsonTest",
      "name": "invalid dataype",
      "comment": "Metadata generates warning and uses default with invalid `dataype`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test046-metadata.json",
      "result": "test046.json",
      "implicit": [
        "test046.csv"
      ]
    },
    {
      "id": "manifest-json#test047",
      "type": "csvt:ToJsonTest",
      "name": "invalid aboutUrl",
      "comment": "If the supplied value of a URI template property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test047-metadata.json",
      "result": "test047.json",
      "implicit": [
        "test047.csv"
      ]
    },
    {
      "id": "manifest-json#test048",
      "type": "csvt:ToJsonTest",
      "name": "invalid propertyUrl",
      "comment": "If the supplied value of a URI template property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test048-metadata.json",
      "result": "test048.json",
      "implicit": [
        "test048.csv"
      ]
    },
    {
      "id": "manifest-json#test049",
      "type": "csvt:ToJsonTest",
      "name": "invalid valueUrl",
      "comment": "If the supplied value of a URI template property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test049-metadata.json",
      "result": "test049.json",
      "implicit": [
        "test049.csv"
      ]
    },
    {
      "id": "manifest-json#test050",
      "type": "csvt:ToJsonTest",
      "name": "dialect: delimiter",
      "comment": "Recognizes tab-separated-values with appropriate `delimiter`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test050-metadata.json",
      "result": "test050.json",
      "implicit": [
        "tree-ops.tsv"
      ]
    },
    {
      "id": "manifest-json#test051",
      "type": "csvt:ToJsonTest",
      "name": "dialect: commentPrefix in header",
      "comment": "Adds comments when found in `skipRows`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test051-metadata.json",
      "result": "test051.json",
      "implicit": [
        "test051.csv"
      ]
    },
    {
      "id": "manifest-json#test052",
      "type": "csvt:ToJsonTest",
      "name": "dialect: commentPrefix in rows",
      "comment": "Adds comments when found in `content`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test052-metadata.json",
      "result": "test052.json",
      "implicit": [
        "test052.csv"
      ]
    },
    {
      "id": "manifest-json#test054",
      "type": "csvt:ToJsonTest",
      "name": "dialect: skipColumns",
      "comment": "Ignores skipped columns",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test054-metadata.json",
      "result": "test054.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test055",
      "type": "csvt:ToJsonTest",
      "name": "dialect: skipBlankRows",
      "comment": "Ignores rows in which all columns are empty",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test055-metadata.json",
      "result": "test055.json",
      "implicit": [
        "test055.csv"
      ]
    },
    {
      "id": "manifest-json#test056",
      "type": "csvt:ToJsonTest",
      "name": "dialect: skipInitialSpace",
      "comment": "Equivalent to` trim=\"start\"`",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test056-metadata.json",
      "result": "test056.json",
      "implicit": [
        "test056.csv"
      ]
    },
    {
      "id": "manifest-json#test057",
      "type": "csvt:ToJsonTest",
      "name": "dialect as URL reference",
      "comment": "Loads a `dialect description` if referenced using a URL",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test057-metadata.json",
      "result": "test057.json",
      "implicit": [
        "test057.csv",
        "test057-dialect.json"
      ]
    },
    {
      "id": "manifest-json#test058",
      "type": "csvt:ToJsonTest",
      "name": "table dialect vs tablegroup dialect",
      "comment": "A dialect defined in a Table completely overrides that defined in a TableGroup",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test058-metadata.json",
      "result": "test058.json",
      "implicit": [
        "test058.csv"
      ]
    },
    {
      "id": "manifest-json#test059",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid commentPrefix",
      "comment": "Metadata generates warning and uses default with invalid `commentPrefix` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test059-metadata.json",
      "result": "test059.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test060",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid delimiter",
      "comment": "Metadata generates warning and uses default with invalid `delimiter` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test060-metadata.json",
      "result": "test060.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test061",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid doubleQuote",
      "comment": "Metadata generates warning and uses default with invalid `doubleQuote` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test061-metadata.json",
      "result": "test061.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test062",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid encoding",
      "comment": "Metadata generates warning and uses default with invalid `encoding` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test062-metadata.json",
      "result": "test062.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test063",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid header",
      "comment": "Metadata generates warning and uses default with invalid `header` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test063-metadata.json",
      "result": "test063.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test065",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid headerRowCount",
      "comment": "Metadata generates warning and uses default with invalid `headerRowCount` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test065-metadata.json",
      "result": "test065.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test066",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid lineTerminators",
      "comment": "Metadata generates warning and uses default with invalid `lineTerminators` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test066-metadata.json",
      "result": "test066.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test067",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid quoteChar",
      "comment": "Metadata generates warning and uses default with invalid `quoteChar` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test067-metadata.json",
      "result": "test067.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test068",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid skipBlankRows",
      "comment": "Metadata generates warning and uses default with invalid `skipBlankRows` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test068-metadata.json",
      "result": "test068.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test069",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid skipColumns",
      "comment": "Metadata generates warning and uses default with invalid `skipColumns` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test069-metadata.json",
      "result": "test069.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test070",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid skipInitialSpace",
      "comment": "Metadata generates warning and uses default with invalid `skipInitialSpace` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test070-metadata.json",
      "result": "test070.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test071",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid skipRows",
      "comment": "Metadata generates warning and uses default with invalid `skipRows` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test071-metadata.json",
      "result": "test071.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test072",
      "type": "csvt:ToJsonTest",
      "name": "dialect: invalid trim",
      "comment": "Metadata generates warning and uses default with invalid `trim` value",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test072-metadata.json",
      "result": "test072.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test073",
      "type": "csvt:ToJsonTest",
      "name": "invalid @language",
      "comment": "The value of `@language` MUST be a valid `BCP47` language code",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test073-metadata.json",
      "result": "test073.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test075",
      "type": "csvt:ToJsonTest",
      "name": "invalid tableGroup tableDirection",
      "comment": "An atomic property that must have a single string value that is one of \"rtl\", \"ltr\" or \"default\".",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test075-metadata.json",
      "result": "test075.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test076",
      "type": "csvt:ToJsonTest",
      "name": "invalid table tableDirection",
      "comment": "An atomic property that must have a single string value that is one of \"rtl\", \"ltr\" or \"default\".",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test076-metadata.json",
      "result": "test076.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test093",
      "type": "csvt:ToJsonTest",
      "name": "undefined properties",
      "comment": "Compliant applications MUST ignore properties (aside from _common properties_) which are not defined in this specification and MUST generate a warning when they are encoutered",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test093-metadata.json",
      "result": "test093.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test095",
      "type": "csvt:ToJsonTest",
      "name": "inconsistent array values: transformations",
      "comment": "Any items within an array that are not valid objects of the type expected are ignored",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test095-metadata.json",
      "result": "test095.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test097",
      "type": "csvt:ToJsonTest",
      "name": "inconsistent array values: foreignKeys",
      "comment": "Any items within an array that are not valid objects of the type expected are ignored",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test097-metadata.json",
      "result": "test097.json",
      "implicit": [
        "countries.csv",
        "country_slice.csv"
      ]
    },
    {
      "id": "manifest-json#test098",
      "type": "csvt:ToJsonTest",
      "name": "inconsistent array values: tables",
      "comment": "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test098-metadata.json",
      "result": "test098.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test099",
      "type": "csvt:ToJsonTest",
      "name": "inconsistent array values: transformations",
      "comment": "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test099-metadata.json",
      "result": "test099.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test101",
      "type": "csvt:ToJsonTest",
      "name": "inconsistent array values: foreignKeys",
      "comment": "If the supplied value of an array property is not an array (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty array",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test101-metadata.json",
      "result": "test101.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test102",
      "type": "csvt:ToJsonTest",
      "name": "inconsistent link values: @id",
      "comment": "If the supplied value of a link property is not a string (eg if it is an integer), compliant applications must issue a warning and proceed as if the property had been supplied with an empty string",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test102-metadata.json",
      "result": "test102.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test106",
      "type": "csvt:ToJsonTest",
      "name": "invalid dialect",
      "comment": "If the supplied value of an object property is not a string or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an object with no properties.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test106-metadata.json",
      "result": "test106.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test109",
      "type": "csvt:ToJsonTest",
      "name": "titles with invalid language",
      "comment": "Natural Language properties may be objects whose properties MUST be language codes as defined by [BCP47] and whose values are either strings or arrays, providing natural language strings in that language",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test109-metadata.json",
      "result": "test109.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test110",
      "type": "csvt:ToJsonTest",
      "name": "titles with non-string values",
      "comment": "Natural Language properties may be objects whose properties MUST be language codes as defined by [BCP47] and whose values are either strings or arrays, providing natural language strings in that language",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test110-metadata.json",
      "result": "test110.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test111",
      "type": "csvt:ToJsonTest",
      "name": "titles with invalid value",
      "comment": "If the supplied value of a natural language property is not a string, array or object (eg if it is an integer), compliant applications MUST issue a warning and proceed as if the property had been specified as an empty array",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test111-metadata.json",
      "result": "test111.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test112",
      "type": "csvt:ToJsonTest",
      "name": "titles with non-string array values",
      "comment": "If the supplied value is an array, any items in that array that are not strings MUST be ignored",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test112-metadata.json",
      "result": "test112.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test113",
      "type": "csvt:ToJsonTest",
      "name": "invalid suppressOutput",
      "comment": "Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test113-metadata.json",
      "result": "test113.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test114",
      "type": "csvt:ToJsonTest",
      "name": "invalid name",
      "comment": "Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test114-metadata.json",
      "result": "test114.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test115",
      "type": "csvt:ToJsonTest",
      "name": "invalid virtual",
      "comment": "Atomic properties: Processors MUST issue a warning if a property is set to an invalid value type",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test115-metadata.json",
      "result": "test115.json",
      "implicit": [
        "tree-ops.csv"
      ]
    },
    {
      "id": "manifest-json#test116",
      "type": "csvt:ToJsonTest",
      "name": "file-metadata with query component",
      "comment": "processors MUST attempt to locate a file-specific metadata document. This method MUST NOT be used if the URL of the tabular data file contains a query component.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test116.csv?query",
      "result": "test116.json",
      "implicit": [
        "test116.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test117",
      "type": "csvt:ToJsonTest",
      "name": "file-metadata not referencing file",
      "comment": "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it must be ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test117.csv",
      "result": "test117.json",
      "implicit": [
        "test117.csv-metadata.json"
      ]
    },
    {
      "id": "manifest-json#test118",
      "type": "csvt:ToJsonTest",
      "name": "directory-metadata with query component",
      "comment": "processors MUST attempt to locate a directory-level metadata document. This method MUST NOT be used if the URL of the tabular data file contains a query component.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test118/action.csv?query",
      "result": "test118/result.json",
      "implicit": [
        "test118/metadata.json"
      ]
    },
    {
      "id": "manifest-json#test119",
      "type": "csvt:ToJsonTest",
      "name": "directory-metadata not referencing file",
      "comment": "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it must be ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test119/action.csv",
      "result": "test119/result.json",
      "implicit": [
        "test119/metadata.json"
      ]
    },
    {
      "id": "manifest-json#test120",
      "type": "csvt:ToJsonTest",
      "name": "link-metadata not referencing file",
      "comment": "If the metadata file found at this location does not explicitly include a reference to the requested tabular data file then it MUST be ignored.",
      "approval": "csvt:Proposed",
      "option": {
        "noProv": true
      },
      "action": "test120.csv",
      "result": "test120.json",
      "implicit": [
        "test120-linked-metadata.json"
      ],
      "httpLink": "<test120-linked-metadata.json>; rel=\"describedby\""
    }
  ]
}
